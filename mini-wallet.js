// === MINI WALLET MANAGER ===

// === –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ü–õ–ê–¢–ï–ñ–ï–ô ===
class PaymentConfig {
    static RECIPIENT_ADDRESS = "UQAeXSRClDQ5Xcx9WoKKfT9zn_pyk-Uep7fnSdnd_-4dUTHQ"; // –í–ê–® TON –ö–û–®–ï–õ–ï–ö
    static PIXEL_PRICE = 5; // –¶–µ–Ω–∞ –∑–∞ –ø–∏–∫—Å–µ–ª—å –≤ TON
    static TRANSACTION_COMMENT = "NFTG-ZONIX Pixel Purchase"; // –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    
    // –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ—Å—Ç–Ω–µ—Ç –∞–¥—Ä–µ—Å
    static TEST_RECIPIENT = "EQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAM9c";
    
    static getRecipientAddress(isTestnet = false) {
        if (isTestnet) {
            return this.TEST_RECIPIENT;
        }
        
        return this.RECIPIENT_ADDRESS;
    }
}

class MiniWallet {
    constructor() {
        this.tonConnect = null;
        this.isConnected = false;
        this.walletAddress = null;
        this.balance = 0;
        this.isTestnet = false; // –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ false –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
        
        this.init();
    }

    async init() {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ TON Connect UI –Ω–µ –±—ã–ª —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
            if (window.tonConnectInstance) {
                console.log('Using existing TON Connect instance');
                this.tonConnect = window.tonConnectInstance;
            } else {
                // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TON Connect UI —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
                this.tonConnect = new TON_CONNECT_UI.TonConnectUI({
                    manifestUrl: this.getManifestUrl(),
                    uiPreferences: {
                        theme: 'DARK',
                        colorsSet: {
                            [TON_CONNECT_UI.THEME.DARK]: {
                                connectButton: {
                                    background: '#00D4FF',
                                    foreground: '#000000'
                                }
                            }
                        }
                    }
                });
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Å—Ç–∞–Ω—Å –≥–ª–æ–±–∞–ª—å–Ω–æ
                window.tonConnectInstance = this.tonConnect;
            }

            // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            this.createConnectButton();
            
            // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
            this.setupEventListeners();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            this.checkExistingConnection();
            
            console.log('‚úÖ TON Wallet initialized');
        } catch (error) {
            console.error('‚ùå Failed to initialize TON wallet:', error);
            
            // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å –º–∞–Ω–∏—Ñ–µ—Å—Ç–æ–º –∏–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–º
            if (error.message.includes('already been used') || 
                error.message.includes('tc-root') || 
                error.message.includes('422') ||
                error.message.includes('manifest')) {
                console.log('üîÑ TON Connect initialization failed, switching to demo mode');
                this.initDemoMode();
            } else {
                this.handleWalletError(error);
            }
        }
    }

    initDemoMode() {
        console.log('üß™ Initializing demo wallet mode');
        
        // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        this.createConnectButton();
        
        // –í –¥–µ–º–æ —Ä–µ–∂–∏–º–µ —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–π —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
            MiniUtils.showNotification('–î–µ–º–æ —Ä–µ–∂–∏–º –∫–æ—à–µ–ª—å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω', 'info');
        }, 500);
        
        // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ä—É—á–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        this.isDemoMode = true;
    }

    getManifestUrl() {
        // –î–ª—è localhost - —Å–æ–∑–¥–∞–µ–º inline –º–∞–Ω–∏—Ñ–µ—Å—Ç
        if (window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1') {
            return this.createInlineManifest();
        }
        
        // –î–ª—è –≤–∞—à–µ–≥–æ Vercel –¥–æ–º–µ–Ω–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Ñ–∞–π–ª (–±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ)
        if (window.location.hostname === 'nftg-zonix-mini.vercel.app') {
            return `${window.location.origin}/tonconnect-manifest.json`;
        }
        
        // –î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ - –µ—Å–ª–∏ —É –≤–∞—Å –±—É–¥–µ—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –¥–æ–º–µ–Ω
        if (window.location.hostname.includes('nftg-zonix.com')) {
            return `${window.location.origin}/tonconnect-manifest.json`;
        }
        
        // Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –º–∞–Ω–∏—Ñ–µ—Å—Ç
        return 'https://raw.githubusercontent.com/ton-community/tutorials/main/03-client/test/public/tonconnect-manifest.json';
    }

    createInlineManifest() {
        // –°–æ–∑–¥–∞–µ–º blob URL —Å –º–∞–Ω–∏—Ñ–µ—Å—Ç–æ–º –¥–ª—è localhost
        const manifest = {
            url: window.location.origin,
            name: "NFTG-ZONIX Mini App",
            iconUrl: "https://ton.org/download/ton_symbol.png", // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –∏–∫–æ–Ω–∫—É TON
            termsOfUseUrl: `${window.location.origin}`,
            privacyPolicyUrl: `${window.location.origin}`
        };
        
        const blob = new Blob([JSON.stringify(manifest)], { type: 'application/json' });
        const url = URL.createObjectURL(blob);
        
        console.log('Created inline manifest for localhost:', manifest);
        return url;
    }

    createConnectButton() {
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∫–æ—à–µ–ª—å–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        const menuItems = document.querySelector('.menu-items');
        if (!menuItems) return;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–Ω–æ–ø–∫–∞ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞
        if (document.getElementById('wallet-connect-btn')) {
            return;
        }

        const walletButton = document.createElement('button');
        walletButton.className = 'menu-item wallet-connect-item';
        walletButton.id = 'wallet-connect-btn';
        walletButton.innerHTML = `
            <span class="menu-icon">üëõ</span>
            <span class="menu-text">
                <div class="menu-title" id="wallet-title">–ü–æ–¥–∫–ª—é—á–∏—Ç—å –∫–æ—à–µ–ª–µ–∫</div>
                <div class="menu-subtitle" id="wallet-subtitle">TON –∫–æ—à–µ–ª–µ–∫ –¥–ª—è –ø–æ–∫—É–ø–æ–∫</div>
            </span>
            <span class="menu-arrow">‚Üí</span>
        `;

        // –í—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–¥ –∫–Ω–æ–ø–∫–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
        const verificationBtn = document.getElementById('verification-btn');
        if (verificationBtn) {
            menuItems.insertBefore(walletButton, verificationBtn);
        } else {
            menuItems.appendChild(walletButton);
        }

        walletButton.addEventListener('click', () => this.handleWalletClick());
    }

    setupEventListeners() {
        if (this.tonConnect) {
            // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            this.tonConnect.onStatusChange((wallet) => {
                if (wallet) {
                    this.onWalletConnected(wallet);
                } else {
                    this.onWalletDisconnected();
                }
            });
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–∫—É–ø–∫–∏ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫–æ—à–µ–ª—å–∫–∞
        const originalShowActionButton = window.miniGrid?.showActionButton?.bind(window.miniGrid);
        if (originalShowActionButton) {
            window.miniGrid.showActionButton = (type) => {
                originalShowActionButton(type);
                this.updateActionButtonForWallet(type);
            };
        }

        // –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ–º—Å—è —Å –º–æ–¥–∞–ª–∞–º–∏ –ø–æ–∫—É–ø–∫–∏
        setTimeout(() => {
            this.enhancePurchaseModals();
        }, 1000);
    }

    async checkExistingConnection() {
        try {
            if (this.tonConnect && !this.isDemoMode) {
                const currentWallet = this.tonConnect.wallet;
                if (currentWallet?.account?.address) {
                    this.onWalletConnected(currentWallet);
                }
            }
        } catch (error) {
            console.log('No existing wallet connection');
        }
    }

    async handleWalletClick() {
        if (this.isConnected) {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –∫–æ—à–µ–ª—å–∫–∞
            this.showWalletMenu();
        } else {
            // –ü–æ–¥–∫–ª—é—á–∞–µ–º –∫–æ—à–µ–ª–µ–∫
            await this.connectWallet();
        }
    }

    async connectWallet() {
        try {
            // –ï—Å–ª–∏ –¥–µ–º–æ —Ä–µ–∂–∏–º –∏–ª–∏ TON Connect –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
            if (this.isDemoMode || !this.tonConnect) {
                this.showDemoConnectOptions();
                return;
            }

            MiniUtils.showNotification('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞...', 'info');
            
            // –ü—Ä–æ–±—É–µ–º –æ—Ç–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            await this.tonConnect.openModal();
            
        } catch (error) {
            console.error('Failed to connect wallet:', error);
            
            // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–µ–º–æ —Ä–µ–∂–∏–º
            this.showConnectionErrorOptions(error);
        }
    }

    showDemoConnectOptions() {
        if (window.Telegram?.WebApp) {
            window.Telegram.WebApp.showPopup({
                title: '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞',
                message: '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:',
                buttons: [
                    { id: 'demo', type: 'default', text: 'üß™ –î–µ–º–æ –∫–æ—à–µ–ª–µ–∫' },
                    { id: 'real', type: 'default', text: 'üíé –†–µ–∞–ª—å–Ω—ã–π –∫–æ—à–µ–ª–µ–∫' },
                    { type: 'cancel' }
                ]
            }, (buttonId) => {
                this.handleConnectOption(buttonId);
            });
        } else {
            // Fallback –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞
            const options = `
–î–µ–º–æ —Ä–µ–∂–∏–º –∫–æ—à–µ–ª—å–∫–∞ –∞–∫—Ç–∏–≤–µ–Ω.

–û–ø—Ü–∏–∏:
1. –ü–æ–¥–∫–ª—é—á–∏—Ç—å –¥–µ–º–æ –∫–æ—à–µ–ª–µ–∫ (demo)
2. –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –∫–æ—à–µ–ª–µ–∫ (real)

–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:`;
            
            const choice = prompt(options);
            this.handleConnectOption(choice);
        }
    }

    showConnectionErrorOptions(error) {
        const errorMsg = error.message?.includes('manifest') ? 
            '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞ –∫–æ—à–µ–ª—å–∫–∞' : 
            '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞';

        if (window.Telegram?.WebApp) {
            window.Telegram.WebApp.showPopup({
                title: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è',
                message: `${errorMsg}\n\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–µ–º–æ —Ä–µ–∂–∏–º?`,
                buttons: [
                    { id: 'demo', type: 'default', text: '–î–∞, –¥–µ–º–æ —Ä–µ–∂–∏–º' },
                    { type: 'cancel', text: '–û—Ç–º–µ–Ω–∞' }
                ]
            }, (buttonId) => {
                if (buttonId === 'demo') {
                    this.forceConnect();
                }
            });
        } else {
            if (confirm(`${errorMsg}\n\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–µ–º–æ —Ä–µ–∂–∏–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è?`)) {
                this.forceConnect();
            }
        }
    }

    handleConnectOption(option) {
        switch (option) {
            case 'demo':
                this.forceConnect();
                break;
            case 'real':
                if (this.tonConnect) {
                    this.tonConnect.openModal().catch(error => {
                        MiniUtils.showNotification('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –∫–æ—à–µ–ª–µ–∫', 'error');
                        console.error('Real wallet connection failed:', error);
                    });
                } else {
                    MiniUtils.showNotification('TON Connect –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω', 'error');
                }
                break;
        }
    }

    async disconnectWallet() {
        try {
            if (this.tonConnect && !this.isDemoMode) {
                await this.tonConnect.disconnect();
            } else {
                // –î–ª—è –¥–µ–º–æ —Ä–µ–∂–∏–º–∞
                this.onWalletDisconnected();
            }
        } catch (error) {
            console.error('Failed to disconnect wallet:', error);
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º
            this.onWalletDisconnected();
        }
    }

    onWalletConnected(wallet) {
        this.isConnected = true;
        this.walletAddress = wallet?.account?.address || "UQDemoWalletAddressForTestingPurposes123456789";
        
        // –û–±–Ω–æ–≤–ª—è–µ–º UI
        this.updateWalletButton(true);
        this.updateStatusInfo();
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–ª–∞–Ω—Å
        this.loadBalance();
        
        const walletType = this.isDemoMode ? '–î–µ–º–æ –∫–æ—à–µ–ª–µ–∫' : '–ö–æ—à–µ–ª–µ–∫';
        MiniUtils.showNotification(`${walletType} –ø–æ–¥–∫–ª—é—á–µ–Ω!`, 'success');
        MiniUtils.vibrate([100, 50, 100]);
        
        console.log('Wallet connected:', this.walletAddress);
        console.log('Payments will go to:', PaymentConfig.RECIPIENT_ADDRESS);
    }

    onWalletDisconnected() {
        this.isConnected = false;
        this.walletAddress = null;
        this.balance = 0;
        this.isDemoMode = false;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º UI
        this.updateWalletButton(false);
        this.updateStatusInfo();
        
        MiniUtils.showNotification('–ö–æ—à–µ–ª–µ–∫ –æ—Ç–∫–ª—é—á–µ–Ω', 'info');
        
        console.log('Wallet disconnected');
    }

    updateWalletButton(connected) {
        const walletTitle = document.getElementById('wallet-title');
        const walletSubtitle = document.getElementById('wallet-subtitle');
        const walletButton = document.getElementById('wallet-connect-btn');

        if (connected) {
            const prefix = this.isDemoMode ? 'üß™ ' : 'üíé ';
            if (walletTitle) walletTitle.textContent = `${prefix}TON –ö–æ—à–µ–ª–µ–∫`;
            if (walletSubtitle) walletSubtitle.textContent = this.formatAddress(this.walletAddress);
            if (walletButton) walletButton.classList.add('connected');
        } else {
            if (walletTitle) walletTitle.textContent = '–ü–æ–¥–∫–ª—é—á–∏—Ç—å –∫–æ—à–µ–ª–µ–∫';
            if (walletSubtitle) walletSubtitle.textContent = 'TON –∫–æ—à–µ–ª–µ–∫ –¥–ª—è –ø–æ–∫—É–ø–æ–∫';
            if (walletButton) walletButton.classList.remove('connected');
        }
    }

    updateStatusInfo() {
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–ª–∞–Ω—Å–µ –≤ —Å—Ç–∞—Ç—É—Å –±–∞—Ä
        let balanceElement = document.getElementById('wallet-balance');
        
        if (!balanceElement) {
            balanceElement = document.createElement('div');
            balanceElement.id = 'wallet-balance';
            balanceElement.className = 'status-item';
            balanceElement.innerHTML = `
                <span class="status-label">–ë–∞–ª–∞–Ω—Å:</span>
                <span class="status-value" id="balance-value">-</span>
            `;
            
            const statusInfo = document.querySelector('.status-info');
            if (statusInfo) {
                statusInfo.appendChild(balanceElement);
            }
        }

        const balanceValue = document.getElementById('balance-value');
        if (balanceValue) {
            if (this.isConnected) {
                const suffix = this.isDemoMode ? ' üß™' : '';
                balanceValue.textContent = `${this.balance.toFixed(2)} TON${suffix}`;
                balanceValue.style.color = this.balance > 0 ? '#00FF88' : '#FFB800';
            } else {
                balanceValue.textContent = '-';
                balanceValue.style.color = '#666';
            }
        }
    }

    updateActionButtonForWallet(type) {
        const actionButton = document.getElementById('action-button');
        if (!actionButton || !this.isConnected) return;

        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä TON –∫ –∫–Ω–æ–ø–∫–µ –ø–æ–∫—É–ø–∫–∏
        const currentText = actionButton.textContent;
        const icon = this.isDemoMode ? 'üß™' : 'üíé';
        if (!currentText.includes(icon)) {
            const originalHTML = actionButton.innerHTML;
            actionButton.innerHTML = `
                <div style="display: flex; align-items: center; gap: 6px;">
                    <span>${icon}</span>
                    <span>${currentText}</span>
                </div>
            `;
        }
    }

    async loadBalance() {
        try {
            if (!this.walletAddress) return;

            // –î–ª—è –¥–µ–º–æ —Ä–µ–∂–∏–º–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º mock –±–∞–ª–∞–Ω—Å
            if (this.isDemoMode) {
                this.balance = 100 + Math.random() * 50; // 100-150 TON –¥–ª—è —Ç–µ—Å—Ç–∞
                this.updateStatusInfo();
                return;
            }

            // –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ –ø–æ–ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –±–∞–ª–∞–Ω—Å —á–µ—Ä–µ–∑ API
            try {
                const response = await fetch(`https://tonapi.io/v2/accounts/${this.walletAddress}`);
                if (response.ok) {
                    const data = await response.json();
                    this.balance = parseFloat(data.balance) / 1000000000; // Convert from nanoTON
                } else {
                    // –ï—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º mock
                    this.balance = 50 + Math.random() * 100;
                }
            } catch (error) {
                console.log('Could not load real balance, using mock');
                this.balance = 50 + Math.random() * 100;
            }
            
            this.updateStatusInfo();
            
        } catch (error) {
            console.error('Failed to load balance:', error);
            this.balance = 0;
            this.updateStatusInfo();
        }
    }

    showWalletMenu() {
        const walletType = this.isDemoMode ? '–î–µ–º–æ –∫–æ—à–µ–ª–µ–∫' : 'TON –ö–æ—à–µ–ª–µ–∫';
        const balanceText = this.isDemoMode ? 
            `${this.balance.toFixed(2)} TON (—Ç–µ—Å—Ç–æ–≤—ã–µ)` : 
            `${this.balance.toFixed(2)} TON`;

        if (window.Telegram?.WebApp) {
            window.Telegram.WebApp.showPopup({
                title: walletType,
                message: `–ê–¥—Ä–µ—Å: ${this.formatAddress(this.walletAddress)}\n–ë–∞–ª–∞–Ω—Å: ${balanceText}\n\n–ü–ª–∞—Ç–µ–∂–∏ –∏–¥—É—Ç –Ω–∞:\n${this.formatAddress(PaymentConfig.RECIPIENT_ADDRESS)}`,
                buttons: [
                    { id: 'copy', type: 'default', text: '–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∞–¥—Ä–µ—Å' },
                    ...(this.isDemoMode ? [{ id: 'add_balance', type: 'default', text: '–î–æ–±–∞–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å' }] : []),
                    { id: 'disconnect', type: 'destructive', text: '–û—Ç–∫–ª—é—á–∏—Ç—å' },
                    { type: 'cancel' }
                ]
            }, (buttonId) => {
                this.handleWalletMenuAction(buttonId);
            });
        } else {
            // Fallback –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞
            const demoOptions = this.isDemoMode ? '\n\'add\' - –¥–æ–±–∞–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å' : '';
            const action = prompt(`${walletType}\n–ê–¥—Ä–µ—Å: ${this.formatAddress(this.walletAddress)}\n–ë–∞–ª–∞–Ω—Å: ${balanceText}\n\n–ü–ª–∞—Ç–µ–∂–∏ –∏–¥—É—Ç –Ω–∞: ${this.formatAddress(PaymentConfig.RECIPIENT_ADDRESS)}\n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n'copy' - –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∞–¥—Ä–µ—Å${demoOptions}\n'disconnect' - –æ—Ç–∫–ª—é—á–∏—Ç—å:`);
            if (action) {
                this.handleWalletMenuAction(action);
            }
        }
    }

    handleWalletMenuAction(action) {
        switch (action) {
            case 'copy':
                MiniUtils.copyToClipboard(this.walletAddress);
                MiniUtils.showNotification('–ê–¥—Ä–µ—Å —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω', 'success');
                break;
            case 'add_balance':
            case 'add':
                if (this.isDemoMode) {
                    this.addBalance(50);
                }
                break;
            case 'disconnect':
                this.disconnectWallet();
                break;
        }
    }

    formatAddress(address) {
        if (!address) return '';
        return `${address.slice(0, 6)}...${address.slice(-6)}`;
    }

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è –ø–æ–∫—É–ø–∫–∏ (–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –º–æ–¥–∞–ª–∞–º–∏)
    async purchasePixel(pixelId, price) {
        if (!this.isConnected) {
            MiniUtils.showNotification('–ü–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫ –¥–ª—è –ø–æ–∫—É–ø–∫–∏', 'error');
            return false;
        }

        if (this.balance < price) {
            MiniUtils.showNotification('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤', 'error');
            return false;
        }

        try {
            // –í –¥–µ–º–æ —Ä–µ–∂–∏–º–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º mock —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            if (this.isDemoMode) {
                return await this.mockTransaction(price);
            }

            // –†–µ–∞–ª—å–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è TON
            MiniUtils.showNotification('–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...', 'info');
            
            const transaction = await this.sendTransaction(price, pixelId);
            
            if (transaction.success) {
                // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ)
                this.balance -= price;
                this.updateStatusInfo();
                
                MiniUtils.showNotification(`–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! ${price} TON ‚Üí ${this.formatAddress(PaymentConfig.RECIPIENT_ADDRESS)}`, 'success');
                return true;
            } else {
                MiniUtils.showNotification('–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞', 'error');
                return false;
            }

        } catch (error) {
            console.error('Purchase failed:', error);
            MiniUtils.showNotification('–û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏', 'error');
            return false;
        }
    }

    async mockTransaction(amount) {
        // –ò–º–∏—Ç–∞—Ü–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        return new Promise((resolve) => {
            const transactionType = this.isDemoMode ? '–¥–µ–º–æ' : '—Ç–µ—Å—Ç–æ–≤—ã–π';
            MiniUtils.showNotification(`–û–±—Ä–∞–±–æ—Ç–∫–∞ ${transactionType} –ø–ª–∞—Ç–µ–∂–∞...`, 'info');
            
            setTimeout(() => {
                this.balance -= amount;
                this.updateStatusInfo();
                MiniUtils.showNotification(`${transactionType.charAt(0).toUpperCase() + transactionType.slice(1)} –ø–ª–∞—Ç–µ–∂ ${amount} TON –≤—ã–ø–æ–ª–Ω–µ–Ω!`, 'success');
                resolve(true);
            }, 2000);
        });
    }

    async sendTransaction(amount, pixelId = null, toAddress = null) {
        try {
            if (!this.tonConnect) {
                throw new Error('TON Connect not available');
            }

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è (–í–ê–® –ö–û–®–ï–õ–ï–ö!)
            const recipientAddress = toAddress || PaymentConfig.getRecipientAddress(this.isTestnet);
            
            // –°–æ–∑–¥–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–∫—É–ø–∫–µ
            let comment = PaymentConfig.TRANSACTION_COMMENT;
            if (pixelId !== null) {
                comment += ` - Pixel #${pixelId}`;
            }

            const transaction = {
                validUntil: Math.floor(Date.now() / 1000) + 600, // 10 minutes
                messages: [
                    {
                        address: recipientAddress,
                        amount: (amount * 1000000000).toString(), // Convert to nanoTON
                        payload: comment // –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                    }
                ]
            };

            console.log('Sending transaction:', {
                recipient: recipientAddress,
                amount: `${amount} TON`,
                comment: comment
            });

            const result = await this.tonConnect.sendTransaction(transaction);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            this.saveTransactionInfo(amount, pixelId, recipientAddress, result);
            
            return { success: true, result };
            
        } catch (error) {
            console.error('Transaction failed:', error);
            return { success: false, error };
        }
    }

    saveTransactionInfo(amount, pixelId, recipient, transactionResult) {
        const transactions = MiniUtils.loadFromStorage('nftg-transaction-history', []);
        
        const transaction = {
            id: MiniUtils.generateId(),
            amount: amount,
            pixelId: pixelId,
            recipient: recipient,
            timestamp: new Date().toISOString(),
            status: 'sent',
            comment: `${PaymentConfig.TRANSACTION_COMMENT}${pixelId ? ` - Pixel #${pixelId}` : ''}`,
            transactionResult: transactionResult
        };
        
        transactions.push(transaction);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        if (transactions.length > 100) {
            transactions.splice(0, transactions.length - 100);
        }
        
        MiniUtils.saveToStorage('nftg-transaction-history', transactions);
        console.log('Transaction saved to history:', transaction);
    }

    getTransactionHistory() {
        return MiniUtils.loadFromStorage('nftg-transaction-history', []);
    }

    // –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –º–æ–¥–∞–ª–∞–º–∏ –ø–æ–∫—É–ø–∫–∏
    enhancePurchaseModals() {
        // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏
        const originalConfirmPurchase = window.miniModals?.confirmPurchase?.bind(window.miniModals);
        if (originalConfirmPurchase) {
            window.miniModals.confirmPurchase = async () => {
                if (this.isConnected) {
                    const pixelIdElement = document.getElementById('purchase-pixel-id');
                    const pixelId = pixelIdElement ? parseInt(pixelIdElement.textContent) : null;
                    const success = await this.purchasePixel(pixelId, PaymentConfig.PIXEL_PRICE);
                    if (success) {
                        originalConfirmPurchase();
                    }
                } else {
                    MiniUtils.showNotification('–ü–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫ –¥–ª—è –ø–æ–∫—É–ø–∫–∏', 'error');
                }
            };
        }

        // –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π –ø–æ–∫—É–ø–∫–∏
        const originalConfirmMassPurchase = window.miniModals?.confirmMassPurchase?.bind(window.miniModals);
        if (originalConfirmMassPurchase) {
            window.miniModals.confirmMassPurchase = async () => {
                if (this.isConnected) {
                    const count = parseInt(document.getElementById('mass-count')?.textContent || '0');
                    const total = count * PaymentConfig.PIXEL_PRICE;
                    const success = await this.purchasePixel(null, total);
                    if (success) {
                        originalConfirmMassPurchase();
                    }
                } else {
                    MiniUtils.showNotification('–ü–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫ –¥–ª—è –ø–æ–∫—É–ø–∫–∏', 'error');
                }
            };
        }
    }

    // Utility methods
    isWalletConnected() {
        return this.isConnected;
    }

    getWalletAddress() {
        return this.walletAddress;
    }

    getBalance() {
        return this.balance;
    }

    setTestMode(enabled) {
        this.isTestnet = enabled;
        console.log(`Test mode ${enabled ? 'enabled' : 'disabled'}`);
        
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –±–∞–ª–∞–Ω—Å
        if (this.isConnected) {
            this.loadBalance();
        }
    }

    handleWalletError(error) {
        console.error('Wallet error:', error);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–Ω—è—Ç–Ω—É—é –æ—à–∏–±–∫—É
        let message = '–û—à–∏–±–∫–∞ –∫–æ—à–µ–ª—å–∫–∞';
        if (error.message?.includes('User rejected')) {
            message = '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ';
        } else if (error.message?.includes('Network')) {
            message = '–ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–µ—Ç—å—é';
        } else if (error.message?.includes('manifest')) {
            message = '–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–æ—à–µ–ª—å–∫–∞';
        }
        
        MiniUtils.showNotification(message, 'error');
    }

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–∑ –∫–æ–Ω—Å–æ–ª–∏
    async forceConnect() {
        this.isConnected = true;
        this.isDemoMode = true;
        this.walletAddress = "UQDemoWalletAddressForTestingPurposes123456789";
        this.balance = 150;
        
        this.updateWalletButton(true);
        this.updateStatusInfo();
        
        MiniUtils.showNotification('–î–µ–º–æ –∫–æ—à–µ–ª–µ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω!', 'success');
        console.log('Demo wallet connected for testing');
        console.log('Real payments will go to:', PaymentConfig.RECIPIENT_ADDRESS);
    }

    async forceDisconnect() {
        this.onWalletDisconnected();
        console.log('Wallet force disconnected');
    }

    addBalance(amount) {
        if (this.isConnected) {
            this.balance += amount;
            this.updateStatusInfo();
            const prefix = this.isDemoMode ? '–î–µ–º–æ: ' : '';
            MiniUtils.showNotification(`${prefix}–î–æ–±–∞–≤–ª–µ–Ω–æ ${amount} TON`, 'success');
            console.log(`Added ${amount} TON, new balance: ${this.balance}`);
        } else {
            console.log('Wallet not connected');
        }
    }

    // Debug methods
    getDebugInfo() {
        return {
            isConnected: this.isConnected,
            walletAddress: this.walletAddress,
            balance: this.balance,
            isTestnet: this.isTestnet,
            isDemoMode: this.isDemoMode || false,
            tonConnectReady: !!this.tonConnect,
            manifestUrl: this.getManifestUrl(),
            recipientAddress: PaymentConfig.RECIPIENT_ADDRESS
        };
    }

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    async testPurchase(amount = 5) {
        console.log(`Testing purchase of ${amount} TON...`);
        
        if (!this.isConnected) {
            console.log('‚ùå Wallet not connected');
            return false;
        }
        
        if (this.balance < amount) {
            console.log('‚ùå Insufficient balance');
            return false;
        }
        
        const success = await this.purchasePixel(null, amount);
        console.log(success ? '‚úÖ Purchase successful' : '‚ùå Purchase failed');
        return success;
    }

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    getUsageStats() {
        const stats = MiniUtils.loadFromStorage('nftg-wallet-stats', {
            totalTransactions: 0,
            totalSpent: 0,
            pixelsPurchased: 0,
            lastTransaction: null,
            demoMode: this.isDemoMode || false
        });
        
        return stats;
    }

    updateUsageStats(amount, pixelCount = 1) {
        const stats = this.getUsageStats();
        
        stats.totalTransactions += 1;
        stats.totalSpent += amount;
        stats.pixelsPurchased += pixelCount;
        stats.lastTransaction = new Date().toISOString();
        stats.demoMode = this.isDemoMode || false;
        
        MiniUtils.saveToStorage('nftg-wallet-stats', stats);
        
        console.log('Usage stats updated:', stats);
    }

    // –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–∞
    exportWalletData() {
        const data = {
            address: this.walletAddress,
            stats: this.getUsageStats(),
            isTestnet: this.isTestnet,
            isDemoMode: this.isDemoMode || false,
            recipientAddress: PaymentConfig.RECIPIENT_ADDRESS,
            exportDate: new Date().toISOString()
        };
        
        const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });
        const url = URL.createObjectURL(blob);
        
        const a = document.createElement('a');
        a.href = url;
        a.download = `nftg-wallet-${new Date().toISOString().split('T')[0]}.json`;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        
        URL.revokeObjectURL(url);
        MiniUtils.showNotification('–î–∞–Ω–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã', 'success');
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É
function initWallet() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ TON Connect UI –∑–∞–≥—Ä—É–∂–µ–Ω
    if (typeof TON_CONNECT_UI !== 'undefined') {
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
        setTimeout(() => {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ—à–µ–ª–µ–∫ –µ—â–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
            if (!window.miniWallet) {
                window.miniWallet = new MiniWallet();
                
                // Development helpers
                if (window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1') {
                    window.connectDemoWallet = () => window.miniWallet?.forceConnect();
                    window.disconnectDemoWallet = () => window.miniWallet?.forceDisconnect();
                    window.addBalance = (amount) => window.miniWallet?.addBalance(amount);
                    window.testPurchase = (amount) => window.miniWallet?.testPurchase(amount);
                    window.walletStats = () => window.miniWallet?.getUsageStats();
                    window.exportWallet = () => window.miniWallet?.exportWalletData();
                    window.setTestMode = (enabled) => window.miniWallet?.setTestMode(enabled);
                    
                    console.log('üõ†Ô∏è Wallet development mode active');
                    console.log('Available commands: connectDemoWallet(), disconnectDemoWallet(), addBalance(amount), testPurchase(amount), walletStats(), exportWallet(), setTestMode(true/false)');
                    console.log('üí∞ Payments will go to:', PaymentConfig.RECIPIENT_ADDRESS);
                }
            } else {
                console.log('Wallet already initialized');
            }
        }, 500);
    } else {
        console.warn('TON Connect UI not loaded, wallet features disabled');
        
        // –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        window.miniWallet = {
            isConnected: false,
            balance: 0,
            forceConnect: () => console.log('TON Connect not available'),
            getDebugInfo: () => ({ error: 'TON Connect not loaded' })
        };
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initWallet);
} else {
    initWallet();
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
window.MiniWallet = MiniWallet;