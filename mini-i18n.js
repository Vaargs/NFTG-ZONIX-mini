// === MINI I18N SYSTEM ===

class MiniI18n {
    constructor() {
        this.currentLanguage = 'ru';
        this.translations = {
            ru: {
                // Header
                'header.logo': 'NFTG-ZONIX',
                'header.mode.view': '–ü–†–û–°–ú–û–¢–†',
                'header.mode.buy': '–ü–û–ö–£–ü–ö–ê',
                'header.mode.mass-buy': '–ú–ê–°–°–û–í–ê–Ø –ü–û–ö–£–ü–ö–ê',
                'header.mode.edit': '–†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï',
                
                // Status bar
                'status.selected': '–í–´–ë–†–ê–ù–û',
                'status.owned': '–ö–£–ü–õ–ï–ù–û',
                'status.cost': '–°–¢–û–ò–ú–û–°–¢–¨',
                
                // Mode tabs
                'mode.view': '–ü–†–û–°–ú–û–¢–†',
                'mode.buy': '–ü–û–ö–£–ü–ö–ê',
                'mode.mass-buy': '–ú–ê–°–°–û–í–û',
                'mode.edit': '–†–ï–î–ê–ö–¢–û–†',
                'mode.about': '–û –ü–†–û–ï–ö–¢–ï',
                
                // Buttons
                'button.buy': '–ö–£–ü–ò–¢–¨',
                'button.buy.multiple': '–ö–£–ü–ò–¢–¨ {count} –ü–ò–ö–°–ï–õ–ï–ô',
                'button.buy.single': '–ö–£–ü–ò–¢–¨ –ü–ò–ö–°–ï–õ–¨',
                'button.buy.mass': '–ö–£–ü–ò–¢–¨ {count} –ü–ò–ö–°–ï–õ–ï–ô',
                'button.edit': '–†–ï–î–ê–ö–¢–ò–†–û–í–ê–¢–¨ –û–ë–õ–ê–°–¢–¨',
                'button.edit.single': '–†–ï–î–ê–ö–¢–ò–†–û–í–ê–¢–¨ –ü–ò–ö–°–ï–õ–¨',
                'button.edit.info': '–†–ï–î–ê–ö–¢–ò–†–û–í–ê–¢–¨ –ò–ù–§–û–†–ú–ê–¶–ò–Æ',
                'button.close': '–ó–ê–ö–†–´–¢–¨',
                'button.cancel': '–û–¢–ú–ï–ù–ê',
                'button.confirm': '–ü–û–î–¢–í–ï–†–î–ò–¢–¨',
                'button.save': '–°–û–•–†–ê–ù–ò–¢–¨',
                'button.apply': '–ü–†–ò–ú–ï–ù–ò–¢–¨',
                'button.reset': '–°–ë–†–û–°–ò–¢–¨',
                'button.preview': '–ü–†–ï–î–ü–†–û–°–ú–û–¢–†',
                'button.upload': '–ó–ê–ì–†–£–ó–ò–¢–¨',
                'button.visit': '–ü–ï–†–ï–ô–¢–ò',
                'button.rate': '–û–¶–ï–ù–ò–¢–¨',
                'button.open': '–û–¢–ö–†–´–¢–¨',
                'button.connect': '–ü–û–î–ö–õ–Æ–ß–ò–¢–¨',
                'button.disconnect': '–û–¢–ö–õ–Æ–ß–ò–¢–¨',
                'button.verify': '–í–ï–†–ò–§–ò–¶–ò–†–û–í–ê–¢–¨–°–Ø',
                'button.submit': '–ü–û–î–ê–¢–¨ –ó–ê–Ø–í–ö–£',
                'button.website': '–°–ê–ô–¢',
                
                // Controls
                'control.zoom.in': '–£–≤–µ–ª–∏—á–∏—Ç—å',
                'control.zoom.out': '–£–º–µ–Ω—å—à–∏—Ç—å',
                'control.center': '–¶–µ–Ω—Ç—Ä',
                'control.drag': '–†–µ–∂–∏–º –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è',
                'control.language': '–Ø–∑—ã–∫',
                
                // Menu
                'menu.main': '–ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ',
                'menu.channels': '–ù–ê–í–ò–ì–ê–¢–û–† –ö–ê–ù–ê–õ–û–í',
                'menu.channels.desc': '–û–±–∑–æ—Ä –∏ –ø–æ–∏—Å–∫ –∫–∞–Ω–∞–ª–æ–≤',
                'menu.submit': '–ü–û–î–ê–¢–¨ –ó–ê–Ø–í–ö–£',
                'menu.submit.desc': '–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª –≤ –ø–æ–∏—Å–∫',
                'menu.market': '–ú–ê–†–ö–ï–¢',
                'menu.market.desc': '–ü–æ–∫—É–ø–∫–∞ –∏ –ø—Ä–æ–¥–∞–∂–∞ –ø–∏–∫—Å–µ–ª–µ–π',
                'menu.website': '–í–ï–ë-–°–ê–ô–¢',
                'menu.website.desc': '–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç',
                'menu.verification': '–í–ï–†–ò–§–ò–ö–ê–¶–ò–Ø',
                'menu.verification.desc': '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç',
                'menu.stats': '–°–¢–ê–¢–ò–°–¢–ò–ö–ê',
                'menu.stats.desc': '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –º–µ—Ç—Ä–∏–∫–∏',
                'menu.wallet': '–ö–û–®–ï–õ–ï–ö',
                'menu.wallet.desc': 'TON –∫–æ—à–µ–ª–µ–∫ –¥–ª—è –ø–æ–∫—É–ø–æ–∫',
                'menu.wallet.connect': '–ü–æ–¥–∫–ª—é—á–∏—Ç—å –∫–æ—à–µ–ª–µ–∫',
                
                // User status
                'user.verified': '–í–ï–†–ò–§–ò–¶–ò–†–û–í–ê–ù',
                'user.not_verified': '–ù–ï –í–ï–†–ò–§–ò–¶–ò–†–û–í–ê–ù',
                'user.pending': '–í–ï–†–ò–§–ò–ö–ê–¶–ò–Ø...',
                'user.failed': '–û–®–ò–ë–ö–ê –í–ï–†–ò–§–ò–ö–ê–¶–ò–ò',
                
                // Channels
                'channels.title': '–ù–ê–í–ò–ì–ê–¢–û–† –ö–ê–ù–ê–õ–û–í',
                'channels.search': '–ü–æ–∏—Å–∫ –∫–∞–Ω–∞–ª–æ–≤...',
                'channels.categories': '–ö–ê–¢–ï–ì–û–†–ò–ò',
                'channels.sort': '–°–û–†–¢–ò–†–û–í–ö–ê',
                'channels.sort.newest': '–ù–û–í–´–ï',
                'channels.sort.rating': '–ü–û –†–ï–ô–¢–ò–ù–ì–£',
                'channels.sort.subscribers': '–ü–û –ü–û–î–ü–ò–°–ß–ò–ö–ê–ú',
                'channels.sort.activity': '–ü–û –ê–ö–¢–ò–í–ù–û–°–¢–ò',
                'channels.empty': '–ö–∞–Ω–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã',
                'channels.empty.desc': '–ö—É–ø–∏—Ç–µ –ø–∏–∫—Å–µ–ª–∏ —Å –∫–∞–Ω–∞–ª–∞–º–∏ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã',
                'channels.my': '–ú–û–ô',
                'channels.verified': '‚úì',
                'channels.approved': 'üìù',
                'channels.no_pixel': '–ë–µ–∑ –ø–∏–∫—Å–µ–ª—è',
                'channels.pixel': '#',
                'channels.subscribers': '–ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤',
                'channels.rating': '–û—Ü–µ–Ω–∏—Ç—å',
                'channels.open': '–û—Ç–∫—Ä—ã—Ç—å',
                
                // Categories
                'category.crypto': '–ö–†–ò–ü–¢–ê',
                'category.games': '–ò–ì–†–´',
                'category.news': '–ù–û–í–û–°–¢–ò',
                'category.tech': '–¢–ï–•–ù–û–õ–û–ì–ò–ò',
                'category.business': '–ë–ò–ó–ù–ï–°',
                'category.education': '–û–ë–†–ê–ó–û–í–ê–ù–ò–ï',
                'category.sports': '–°–ü–û–†–¢',
                'category.entertainment': '–†–ê–ó–í–õ–ï–ß–ï–ù–ò–Ø',
                'category.demo': '–î–ï–ú–û',
                'category.general': '–û–ë–©–ï–ï',
                
                // Modals
                'modal.purchase.title': '–ü–û–ö–£–ü–ö–ê –ü–ò–ö–°–ï–õ–Ø',
                'modal.purchase.price': '–¶–ï–ù–ê',
                'modal.purchase.telegram': 'TELEGRAM –ö–ê–ù–ê–õ',
                'modal.purchase.description': '–û–ü–ò–°–ê–ù–ò–ï (–û–ü–¶–ò–û–ù–ê–õ–¨–ù–û)',
                'modal.purchase.description.placeholder': '–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞',
                'modal.purchase.telegram.placeholder': '@username –∏–ª–∏ https://t.me/username',
                
                'modal.mass_purchase.title': '–ú–ê–°–°–û–í–ê–Ø –ü–û–ö–£–ü–ö–ê',
                'modal.mass_purchase.pixels': '–ü–ò–ö–°–ï–õ–ï–ô',
                'modal.mass_purchase.total': '–û–ë–©–ê–Ø –¶–ï–ù–ê',
                
                'modal.edit.title': '–†–ï–î–ê–ö–¢–û–† –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô',
                'modal.edit.upload': '–ó–ê–ì–†–£–ó–ò–¢–¨',
                'modal.edit.zoom_in': 'üîç+',
                'modal.edit.zoom_out': 'üîç‚àí',
                'modal.edit.rotate_left': '‚Ü∫',
                'modal.edit.rotate_right': '‚Üª',
                'modal.edit.reset': 'üîÑ',
                'modal.edit.preview': '–ü–†–ï–î–ü–†–û–°–ú–û–¢–†',
                'modal.edit.apply': '–ü–†–ò–ú–ï–ù–ò–¢–¨',
                'modal.edit.upload_image': '–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ',
                
                'modal.pixel_info.title': '–ü–ò–ö–°–ï–õ–¨',
                'modal.pixel_info.owner': '–í–õ–ê–î–ï–õ–ï–¶',
                'modal.pixel_info.categories': '–ö–ê–¢–ï–ì–û–†–ò–ò',
                'modal.pixel_info.date': '–î–ê–¢–ê',
                'modal.pixel_info.price': '–¶–ï–ù–ê',
                'modal.pixel_info.not_specified': '–ù–ï –£–ö–ê–ó–ê–ù–´',
                'modal.pixel_info.unknown': '–ù–ï–ò–ó–í–ï–°–¢–ù–ê',
                
                'modal.edit_info.title': '–†–ï–î–ê–ö–¢–ò–†–û–í–ê–¢–¨ –ò–ù–§–û–†–ú–ê–¶–ò–Æ –ü–ò–ö–°–ï–õ–ï–ô',
                'modal.edit_info.pixels': '–ü–ò–ö–°–ï–õ–ï–ô',
                'modal.edit_info.categories': '–ö–ê–¢–ï–ì–û–†–ò–ò (–î–û 3-–•)',
                'modal.edit_info.selected': '–í–´–ë–†–ê–ù–û',
                'modal.edit_info.none': '–ù–ï–¢',
                'modal.edit_info.description': '–û–ü–ò–°–ê–ù–ò–ï',
                'modal.edit_info.description.placeholder': '–û–ø–∏—Å–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞',
                'modal.edit_info.chars': '—Å–∏–º–≤–æ–ª–æ–≤',
                
                'modal.submission.title': '–ü–û–î–ê–¢–¨ –ó–ê–Ø–í–ö–£ –ù–ê –ö–ê–ù–ê–õ',
                'modal.submission.subtitle': '–í–∞—à –∫–∞–Ω–∞–ª –ø–æ—è–≤–∏—Ç—Å—è –≤ –ø–æ–∏—Å–∫–µ –ø–æ—Å–ª–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏, –¥–∞–∂–µ –±–µ–∑ –ø–æ–∫—É–ø–∫–∏ –ø–∏–∫—Å–µ–ª—è',
                'modal.submission.telegram': 'TELEGRAM –ö–ê–ù–ê–õ',
                'modal.submission.name': '–ù–ê–ó–í–ê–ù–ò–ï –ö–ê–ù–ê–õ–ê',
                'modal.submission.name.placeholder': 'Crypto News Today',
                'modal.submission.categories': '–ö–ê–¢–ï–ì–û–†–ò–ò (–í–´–ë–ï–†–ò–¢–ï –î–û 3-–•)',
                'modal.submission.description': '–û–ü–ò–°–ê–ù–ò–ï –ö–ê–ù–ê–õ–ê',
                'modal.submission.description.placeholder': '–ö—Ä–∞—Ç–∫–æ –æ–ø–∏—à–∏—Ç–µ –≤–∞—à –∫–∞–Ω–∞–ª: —Ç–µ–º–∞—Ç–∏–∫–∞, –∞—É–¥–∏—Ç–æ—Ä–∏—è, —á–∞—Å—Ç–æ—Ç–∞ –ø–æ—Å—Ç–æ–≤...',
                'modal.submission.contact': '–ö–û–ù–¢–ê–ö–¢ –í–õ–ê–î–ï–õ–¨–¶–ê (–û–ü–¶–ò–û–ù–ê–õ–¨–ù–û)',
                'modal.submission.contact.placeholder': '@username –¥–ª—è —Å–≤—è–∑–∏',
                'modal.submission.options': '–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –û–ü–¶–ò–ò',
                'modal.submission.adult': '18+ –ö–û–ù–¢–ï–ù–¢',
                'modal.submission.paid': '–ü–õ–ê–¢–ù–´–ô –ö–û–ù–¢–ï–ù–¢',
                'modal.submission.commercial': '–ö–û–ú–ú–ï–†–ß–ï–°–ö–ò–ô –ö–ê–ù–ê–õ',
                'modal.submission.rules': '–ü–†–ê–í–ò–õ–ê –ú–û–î–ï–†–ê–¶–ò–ò',
                'modal.submission.rules.active': '–ê–∫—Ç–∏–≤–Ω—ã–π –∫–∞–Ω–∞–ª (–ø–æ—Å—Ç—ã –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π)',
                'modal.submission.rules.quality': '–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ',
                'modal.submission.rules.category': '–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
                'modal.submission.rules.auto': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏',
                'modal.submission.rules.no_spam': '–ó–∞–ø—Ä–µ—â–µ–Ω—ã: —Å–ø–∞–º, NSFW, –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ',
                'modal.submission.rules.no_aggregators': '–ö–∞–Ω–∞–ª—ã-–∞–≥—Ä–µ–≥–∞—Ç–æ—Ä—ã –±–µ–∑ –∞–≤—Ç–æ—Ä—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞',
                'modal.submission.agree': '–Ø —Å–æ–≥–ª–∞—Å–µ–Ω —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é, —á—Ç–æ —è–≤–ª—è—é—Å—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –∫–∞–Ω–∞–ª–∞',
                
                'modal.rating.title': '–û–¶–ï–ù–ò–¢–¨ –ö–ê–ù–ê–õ',
                'modal.rating.current': '–¢–ï–ö–£–©–ò–ô –†–ï–ô–¢–ò–ù–ì',
                'modal.rating.your': '–í–ê–®–ê –û–¶–ï–ù–ö–ê',
                'modal.rating.select': '–í–´–ë–ï–†–ò–¢–ï –û–¶–ï–ù–ö–£',
                'modal.rating.comment': '–ö–û–ú–ú–ï–ù–¢–ê–†–ò–ô (–û–ü–¶–ò–û–ù–ê–õ–¨–ù–û)',
                'modal.rating.comment.placeholder': '–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –º–Ω–µ–Ω–∏–µ–º –æ –∫–∞–Ω–∞–ª–µ...',
                'modal.rating.verification': '–í–ï–†–ò–§–ò–ö–ê–¶–ò–Ø –¢–†–ï–ë–£–ï–¢–°–Ø',
                'modal.rating.verification.desc': '–î–ª—è –æ—Ü–µ–Ω–∫–∏ –∫–∞–Ω–∞–ª–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é —á–µ—Ä–µ–∑ –±–æ—Ç',
                'modal.rating.excellent': '–û—Ç–ª–∏—á–Ω–æ',
                'modal.rating.good': '–•–æ—Ä–æ—à–æ',
                'modal.rating.normal': '–ù–æ—Ä–º–∞–ª—å–Ω–æ',
                'modal.rating.bad': '–ü–ª–æ—Ö–æ',
                'modal.rating.very_bad': '–û—á–µ–Ω—å –ø–ª–æ—Ö–æ',
                
                'modal.about.title': '–û –ü–†–û–ï–ö–¢–ï',
                'modal.about.project': 'NFTG-ZONIX',
                'modal.about.subtitle': '–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –ø–æ–∏—Å–∫–∞ Telegram-–∫–∞–Ω–∞–ª–æ–≤',
                'modal.about.description': '–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –ø–æ –ø–æ–∏—Å–∫—É Telegram-–∫–∞–Ω–∞–ª–æ–≤ –∏ –≤–∏–∑—É–∞–ª—å–Ω–æ–º—É —Ä–∞–∑–º–µ—â–µ–Ω–∏—é –∏—Ö –Ω–∞ –ø–∏–∫—Å–µ–ª—å–Ω–æ–π —Å–µ—Ç–∫–µ. –ü—Ä–æ–µ–∫—Ç —Å–æ—á–µ—Ç–∞–µ—Ç –≤ —Å–µ–±–µ:',
                'modal.about.catalog': '–ö–∞—Ç–∞–ª–æ–≥ Telegram-–∫–∞–Ω–∞–ª–æ–≤ –ø–æ —Ç–µ–º–∞–º, —Ç—ç–≥–∞–º –∏ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏',
                'modal.about.grid': '–í–∏–∑—É–∞–ª—å–Ω—É—é NFT-—Å–µ—Ç–∫—É, –≥–¥–µ –∫–∞–∂–¥—ã–π –±–ª–æ–∫ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∫–∞–Ω–∞–ª',
                'modal.about.upload': '–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —Å–≤–æ–π –∫–∞–Ω–∞–ª',
                'modal.about.moderation': '–ú–µ—Ö–∞–Ω–∏–∑–º—ã –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –∏ –∑–∞—â–∏—Ç—ã –æ—Ç –∑–∞–ø—Ä–µ—â—ë–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞',
                'modal.about.ton': '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å TON (TON Connect, NFT, —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏)',
                'modal.about.website': '–ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π —Å–∞–π—Ç —Å –ø–æ–∏—Å–∫–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π –∏ –≤–∏—Ç—Ä–∏–Ω–æ–π –≤—Å–µ—Ö —Ä–∞–∑–º–µ—â—ë–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤',
                'modal.about.inspiration': '–ü—Ä–æ–µ–∫—Ç –≤–¥–æ—Ö–Ω–æ–≤–ª—ë–Ω',
                'modal.about.inspiration.text': '–∏ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω –ø–æ–¥ Telegram-—ç–∫–æ—Å–∏—Å—Ç–µ–º—É.',
                'modal.about.community': '—ç—Ç–æ –Ω–µ —Ç–æ–ª—å–∫–æ —Ä–µ–∫–ª–∞–º–∞, –Ω–æ –∏ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ.',
                
                // Wallet
                'wallet.connected': '–ö–æ—à–µ–ª–µ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω',
                'wallet.not_connected': '–ö–æ—à–µ–ª–µ–∫ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω',
                'wallet.balance': '–ë–∞–ª–∞–Ω—Å',
                'wallet.insufficient': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤',
                'wallet.connect.desc': '–ü–æ–¥–∫–ª—é—á–∏—Ç–µ TON –∫–æ—à–µ–ª–µ–∫ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–∏–∫—Å–µ–ª–µ–π',
                'wallet.demo': '–î–µ–º–æ –∫–æ—à–µ–ª–µ–∫',
                'wallet.real': '–†–µ–∞–ª—å–Ω—ã–π –∫–æ—à–µ–ª–µ–∫',
                'wallet.copy': '–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∞–¥—Ä–µ—Å',
                'wallet.disconnect': '–û—Ç–∫–ª—é—á–∏—Ç—å',
                'wallet.connecting': '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞...',
                'wallet.verification': '–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è',
                'wallet.verification.desc': '–î–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ 0.01 TON –Ω–∞ –∞–¥—Ä–µ—Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏. –°—Ä–µ–¥—Å—Ç–≤–∞ –±—É–¥—É—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –≤–∞—à –∫–æ—à–µ–ª–µ–∫ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.',
                'wallet.verification.send': '–û—Ç–ø—Ä–∞–≤–∏—Ç—å 0.01 TON',
                'wallet.verification.demo': '–î–µ–º–æ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è',
                'wallet.verification.pending': '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏',
                'wallet.verification.pending.desc': '–í–∞—à–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 5 –º–∏–Ω—É—Ç.',
                'wallet.verification.check': '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–π—á–∞—Å',
                'wallet.verification.cancel': '–û—Ç–º–µ–Ω–∏—Ç—å',
                'wallet.verification.success': '–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –°—Ä–µ–¥—Å—Ç–≤–∞ –±—É–¥—É—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.',
                'wallet.verification.demo.success': '–î–µ–º–æ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!',
                
                // Notifications
                'notification.app_ready': '–ü–†–ò–õ–û–ñ–ï–ù–ò–ï –ì–û–¢–û–í–û –ö –†–ê–ë–û–¢–ï!',
                'notification.drag_on': '–†–ï–ñ–ò–ú –ü–ï–†–ï–¢–ê–°–ö–ò–í–ê–ù–ò–Ø –í–ö–õ–Æ–ß–ï–ù',
                'notification.drag_off': '–†–ï–ñ–ò–ú –ü–ï–†–ï–¢–ê–°–ö–ò–í–ê–ù–ò–Ø –í–´–ö–õ–Æ–ß–ï–ù',
                'notification.seamless_on': '–ë–ï–°–®–û–í–ù–´–ô –†–ï–ñ–ò–ú –í–ö–õ–Æ–ß–ï–ù',
                'notification.seamless_off': '–ë–ï–°–®–û–í–ù–´–ô –†–ï–ñ–ò–ú –í–´–ö–õ–Æ–ß–ï–ù',
                'notification.pixel_purchased': '–ü–ò–ö–°–ï–õ–¨ #{id} –ö–£–ü–õ–ï–ù!',
                'notification.pixels_purchased': '–ö–£–ü–õ–ï–ù–û {count} –ü–ò–ö–°–ï–õ–ï–ô!',
                'notification.image_uploaded': '–ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ï –ó–ê–ì–†–£–ñ–ï–ù–û!',
                'notification.image_applied': '–ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ï –¢–û–ß–ù–û –ü–†–ò–ú–ï–ù–ï–ù–û –ö {count} –ü–ò–ö–°–ï–õ–Ø–ú!',
                'notification.info_updated': '–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û–ë–ù–û–í–õ–ï–ù–ê –î–õ–Ø {count} –ü–ò–ö–°–ï–õ–ï–ô!',
                'notification.channel_submitted': '–ó–ê–Ø–í–ö–ê –ù–ê –ö–ê–ù–ê–õ "{name}" –û–¢–ü–†–ê–í–õ–ï–ù–ê –ù–ê –ú–û–î–ï–†–ê–¶–ò–Æ!',
                'notification.channel_rated': '–ö–ê–ù–ê–õ {channel} –û–¶–ï–ù–ï–ù –ù–ê {rating} –ó–í–ï–ó–î!',
                'notification.wallet_connected': '–ö–û–®–ï–õ–ï–ö –ü–û–î–ö–õ–Æ–ß–ï–ù!',
                'notification.wallet_disconnected': '–ö–û–®–ï–õ–ï–ö –û–¢–ö–õ–Æ–ß–ï–ù',
                'notification.demo_wallet_connected': '–î–ï–ú–û –ö–û–®–ï–õ–ï–ö –ü–û–î–ö–õ–Æ–ß–ï–ù!',
                'notification.verification_started': '–î–ï–ú–û –í–ï–†–ò–§–ò–ö–ê–¶–ò–Ø –ó–ê–ü–£–©–ï–ù–ê...',
                'notification.verification_completed': '–í–ï–†–ò–§–ò–ö–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!',
                'notification.verification_cancelled': '–í–ï–†–ò–§–ò–ö–ê–¶–ò–Ø –û–¢–ú–ï–ù–ï–ù–ê',
                'notification.verification_reset': '–í–ï–†–ò–§–ò–ö–ê–¶–ò–Ø –°–ë–†–û–®–ï–ù–ê',
                'notification.address_copied': '–ê–î–†–ï–° –°–ö–û–ü–ò–†–û–í–ê–ù',
                'notification.website_opening': '–û–¢–ö–†–´–¢–ò–ï –û–§–ò–¶–ò–ê–õ–¨–ù–û–ì–û –°–ê–ô–¢–ê',
                'notification.channel_opening': '–û–¢–ö–†–´–¢–ò–ï –ö–ê–ù–ê–õ–ê',
                'notification.data_exported': '–î–ê–ù–ù–´–ï –≠–ö–°–ü–û–†–¢–ò–†–û–í–ê–ù–´',
                'notification.data_cleared': '–í–°–ï –î–ê–ù–ù–´–ï –û–ß–ò–©–ï–ù–´',
                'notification.transform_reset': '–¢–†–ê–ù–°–§–û–†–ú–ê–¶–ò–Ø –°–ë–†–û–®–ï–ù–ê',
                'notification.preview_ready': '–ü–†–ï–î–ü–†–û–°–ú–û–¢–† –ì–û–¢–û–í!',
                'notification.max_categories': '–ú–ê–ö–°–ò–ú–£–ú 3 –ö–ê–¢–ï–ì–û–†–ò–ò',
                'notification.select_image': '–í–´–ë–ï–†–ò–¢–ï –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ï',
                'notification.select_pixels': '–ù–ï –í–´–ë–†–ê–ù–´ –ü–ò–ö–°–ï–õ–ò –î–õ–Ø –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–Ø',
                'notification.own_pixels_only': '–ú–û–ñ–ù–û –†–ï–î–ê–ö–¢–ò–†–û–í–ê–¢–¨ –¢–û–õ–¨–ö–û –°–í–û–ò –ü–ò–ö–°–ï–õ–ò',
                'notification.verification_required': '–î–õ–Ø –û–¶–ï–ù–ö–ò –ö–ê–ù–ê–õ–û–í –¢–†–ï–ë–£–ï–¢–°–Ø –í–ï–†–ò–§–ò–ö–ê–¶–ò–Ø',
                'notification.connect_wallet': '–ü–û–î–ö–õ–Æ–ß–ò–¢–ï –ö–û–®–ï–õ–ï–ö –î–õ–Ø –ü–û–ö–£–ü–ö–ò',
                'notification.insufficient_funds': '–ù–ï–î–û–°–¢–ê–¢–û–ß–ù–û –°–†–ï–î–°–¢–í. –ù–£–ñ–ù–û {needed} TON, –î–û–°–¢–£–ü–ù–û {available} TON',
                'notification.transaction_sent': '–¢–†–ê–ù–ó–ê–ö–¶–ò–Ø –û–¢–ü–†–ê–í–õ–ï–ù–ê! {amount} TON',
                'notification.transaction_rejected': '–¢–†–ê–ù–ó–ê–ö–¶–ò–Ø –û–¢–ö–õ–û–ù–ï–ù–ê',
                'notification.verification_transaction_sent': '–í–ï–†–ò–§–ò–ö–ê–¶–ò–û–ù–ù–ê–Ø –¢–†–ê–ù–ó–ê–ö–¶–ò–Ø –û–¢–ü–†–ê–í–õ–ï–ù–ê! {amount} TON',
                'notification.verification_transaction_rejected': '–í–ï–†–ò–§–ò–ö–ê–¶–ò–û–ù–ù–ê–Ø –¢–†–ê–ù–ó–ê–ö–¶–ò–Ø –û–¢–ö–õ–û–ù–ï–ù–ê',
                'notification.demo_mode_active': '–î–ï–ú–û –†–ï–ñ–ò–ú –ö–û–®–ï–õ–¨–ö–ê –ê–ö–¢–ò–í–ò–†–û–í–ê–ù',
                'notification.processing_demo_payment': '–û–ë–†–ê–ë–û–¢–ö–ê –î–ï–ú–û –ü–õ–ê–¢–ï–ñ–ê...',
                'notification.processing_demo_verification': '–û–ë–†–ê–ë–û–¢–ö–ê –î–ï–ú–û –í–ï–†–ò–§–ò–ö–ê–¶–ò–ò...',
                'notification.demo_payment_success': '–î–ï–ú–û –ü–õ–ê–¢–ï–ñ {amount} TON –í–´–ü–û–õ–ù–ï–ù!',
                'notification.demo_verification_success': '–î–ï–ú–û –í–ï–†–ò–§–ò–ö–ê–¶–ò–Ø {amount} TON –í–´–ü–û–õ–ù–ï–ù–ê!',
                'notification.market_soon': '–ú–ê–†–ö–ï–¢ –ë–£–î–ï–¢ –î–û–°–¢–£–ü–ï–ù –í –°–õ–ï–î–£–Æ–©–ï–ú –û–ë–ù–û–í–õ–ï–ù–ò–ò',
                'notification.transaction_processing': '–û–¢–ü–†–ê–í–ö–ê –¢–†–ê–ù–ó–ê–ö–¶–ò–ò...',
                'notification.verification_transaction_processing': '–û–¢–ü–†–ê–í–ö–ê –í–ï–†–ò–§–ò–ö–ê–¶–ò–û–ù–ù–û–ô –¢–†–ê–ù–ó–ê–ö–¶–ò–ò...',
                'notification.checking_verification': '–ü–†–û–í–ï–†–ö–ê –°–¢–ê–¢–£–°–ê –í–ï–†–ò–§–ò–ö–ê–¶–ò–ò...',
                'notification.wallet_error': '–û–®–ò–ë–ö–ê –ö–û–®–ï–õ–¨–ö–ê',
                'notification.payment_error': '–û–®–ò–ë–ö–ê –ü–õ–ê–¢–ï–ñ–ê',
                'notification.verification_error': '–û–®–ò–ë–ö–ê –í–ï–†–ò–§–ò–ö–ê–¶–ò–ò',
                'notification.connection_cancelled': '–ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –û–¢–ú–ï–ù–ï–ù–û',
                'notification.network_error': '–ü–†–û–ë–õ–ï–ú–ê –° –°–ï–¢–¨–Æ',
                'notification.config_error': '–û–®–ò–ë–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò –ö–û–®–ï–õ–¨–ö–ê',
                'notification.ton_connect_unavailable': 'TON CONNECT –ù–ï–î–û–°–¢–£–ü–ï–ù',
                'notification.wallet_not_available': '–ù–ï –£–î–ê–õ–û–°–¨ –û–¢–ö–†–´–¢–¨ –ö–û–®–ï–õ–ï–ö',
                'notification.language_changed': '–Ø–ó–´–ö –ò–ó–ú–ï–ù–ï–ù –ù–ê {language}',
                
                // Errors
                'error.form': '–û–®–ò–ë–ö–ê –§–û–†–ú–´',
                'error.telegram_link': '–í–í–ï–î–ò–¢–ï –ö–û–†–†–ï–ö–¢–ù–´–ô TELEGRAM –ö–ê–ù–ê–õ',
                'error.channel_name': '–í–í–ï–î–ò–¢–ï –ù–ê–ó–í–ê–ù–ò–ï –ö–ê–ù–ê–õ–ê',
                'error.select_categories': '–í–´–ë–ï–†–ò–¢–ï –•–û–¢–Ø –ë–´ –û–î–ù–£ –ö–ê–¢–ï–ì–û–†–ò–Æ',
                'error.channel_description': '–í–í–ï–î–ò–¢–ï –û–ü–ò–°–ê–ù–ò–ï –ö–ê–ù–ê–õ–ê',
                'error.accept_terms': '–ù–ï–û–ë–•–û–î–ò–ú–û –°–û–ì–õ–ê–°–ò–¢–¨–°–Ø –° –ü–†–ê–í–ò–õ–ê–ú–ò',
                'error.select_rating': '–í–´–ë–ï–†–ò–¢–ï –û–¶–ï–ù–ö–£ –û–¢ 1 –î–û 5 –ó–í–ï–ó–î',
                'error.upload_image': '–ó–ê–ì–†–£–ó–ò–¢–ï –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ï',
                'error.unknown': '–ü–†–û–ò–ó–û–®–õ–ê –û–®–ò–ë–ö–ê',
                'error.app_init': '–û–®–ò–ë–ö–ê –ü–†–ò –ó–ê–ü–£–°–ö–ï –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø',
                'error.init': '–û–®–ò–ë–ö–ê –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø',
                'error.channel_link_unavailable': '–°–°–´–õ–ö–ê –ù–ê –ö–ê–ù–ê–õ –ù–ï–î–û–°–¢–£–ü–ù–ê',
                
                // Tooltips
                'tooltip.pixel': '–ü–∏–∫—Å–µ–ª—å #{id}',
                'tooltip.pixel_available': '–ü–∏–∫—Å–µ–ª—å #{id} - –î–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–æ–∫—É–ø–∫–∏',
                'tooltip.pixel_owned': '–ü–∏–∫—Å–µ–ª—å #{id}\n–í–ª–∞–¥–µ–ª–µ—Ü: {owner}\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}',
                
                // Pixel info
                'pixel.owner': '–í–ª–∞–¥–µ–ª–µ—Ü',
                'pixel.category': '–ö–∞—Ç–µ–≥–æ—Ä–∏—è',
                'pixel.categories': '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏',
                'pixel.date': '–î–∞—Ç–∞',
                'pixel.price': '–¶–µ–Ω–∞',
                'pixel.not_specified': '–ù–µ —É–∫–∞–∑–∞–Ω–∞',
                'pixel.unknown_date': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞',
                'pixel.unknown_owner': '@unknown',
                
                // Time formats
                'time.today': '–°–µ–≥–æ–¥–Ω—è',
                'time.yesterday': '–í—á–µ—Ä–∞',
                'time.days_ago': '{count} –¥–Ω–µ–π –Ω–∞–∑–∞–¥',
                'time.just_now': '–¢–æ–ª—å–∫–æ —á—Ç–æ',
                'time.minutes_ago': '{count} –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥',
                'time.hours_ago': '{count} —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥',
                
                // Stats
                'stats.total_channels': '–í—Å–µ–≥–æ –∫–∞–Ω–∞–ª–æ–≤',
                'stats.pixel_channels': '–° –ø–∏–∫—Å–µ–ª—è–º–∏',
                'stats.approved_channels': '–û–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫',
                'stats.owned_channels': '–í–∞—à–∏—Ö –∫–∞–Ω–∞–ª–æ–≤',
                'stats.avg_subscribers': '–°—Ä–µ–¥–Ω–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏',
                'stats.avg_rating': '–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥',
                'stats.verification_status': '–°—Ç–∞—Ç—É—Å',
                'stats.verification_date': '–î–∞—Ç–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏',
                'stats.verification_type': '–¢–∏–ø',
                'stats.verification_demo': '–î–µ–º–æ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è',
                'stats.not_verified': '–ù–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω',
                'stats.verified': '–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω',
                'stats.most_active': '–°–∞–º—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ',
                'stats.trending': '–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ',
                'stats.by_categories': '–ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º',
                'stats.posts_per_month': '/–º–µ—Å',
                
                // Loading states
                'loading.channels': '–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞–Ω–∞–ª–æ–≤...',
                'loading.transactions': '–ó–∞–≥—Ä—É–∑–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π...',
                'loading.processing': '–û–±—Ä–∞–±–æ—Ç–∫–∞...',
                'loading.connecting': '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...',
                'loading.sending': '–û—Ç–ø—Ä–∞–≤–∫–∞...',
                'loading.verifying': '–ü—Ä–æ–≤–µ—Ä–∫–∞...',
                
                // Empty states
                'empty.no_channels': '–ö–∞–Ω–∞–ª–æ–≤ –Ω–µ—Ç',
                'empty.no_transactions': '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ–∫–∞ –Ω–µ—Ç',
                'empty.no_pixels': '–ü–∏–∫—Å–µ–ª–µ–π –Ω–µ—Ç',
                'empty.no_selection': '–ù–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ'
            },
            
            en: {
                // Header
                'header.logo': 'NFTG-ZONIX',
                'header.mode.view': 'VIEW',
                'header.mode.buy': 'BUY',
                'header.mode.mass-buy': 'MASS BUY',
                'header.mode.edit': 'EDIT',
                
                // Status bar
                'status.selected': 'SELECTED',
                'status.owned': 'OWNED',
                'status.cost': 'COST',
                
                // Mode tabs
                'mode.view': 'VIEW',
                'mode.buy': 'BUY',
                'mode.mass-buy': 'MASS',
                'mode.edit': 'EDITOR',
                'mode.about': 'ABOUT',
                
                // Buttons
                'button.buy': 'BUY',
                'button.buy.multiple': 'BUY {count} PIXELS',
                'button.buy.single': 'BUY PIXEL',
                'button.buy.mass': 'BUY {count} PIXELS',
                'button.edit': 'EDIT AREA',
                'button.edit.single': 'EDIT PIXEL',
                'button.edit.info': 'EDIT INFO',
                'button.close': 'CLOSE',
                'button.cancel': 'CANCEL',
                'button.confirm': 'CONFIRM',
                'button.save': 'SAVE',
                'button.apply': 'APPLY',
                'button.reset': 'RESET',
                'button.preview': 'PREVIEW',
                'button.upload': 'UPLOAD',
                'button.visit': 'VISIT',
                'button.rate': 'RATE',
                'button.open': 'OPEN',
                'button.connect': 'CONNECT',
                'button.disconnect': 'DISCONNECT',
                'button.verify': 'VERIFY',
                'button.submit': 'SUBMIT',
                'button.website': 'WEBSITE',
                
                // Controls
                'control.zoom.in': 'Zoom In',
                'control.zoom.out': 'Zoom Out',
                'control.center': 'Center',
                'control.drag': 'Drag Mode',
                'control.language': 'Language',
                
                // Menu
                'menu.main': 'MAIN MENU',
                'menu.channels': 'CHANNELS NAVIGATOR',
                'menu.channels.desc': 'Browse and search channels',
                'menu.submit': 'SUBMIT CHANNEL',
                'menu.submit.desc': 'Add channel to search',
                'menu.market': 'MARKET',
                'menu.market.desc': 'Buy and sell pixels',
                'menu.website': 'WEBSITE',
                'menu.website.desc': 'Visit official website',
                'menu.verification': 'VERIFICATION',
                'menu.verification.desc': 'Verify account',
                'menu.stats': 'STATISTICS',
                'menu.stats.desc': 'Analytics and metrics',
                'menu.wallet': 'WALLET',
                'menu.wallet.desc': 'TON wallet for purchases',
                'menu.wallet.connect': 'Connect wallet',
                
                // User status
                'user.verified': 'VERIFIED',
                'user.not_verified': 'NOT VERIFIED',
                'user.pending': 'VERIFYING...',
                'user.failed': 'VERIFICATION FAILED',
                
                // Channels
                'channels.title': 'CHANNELS NAVIGATOR',
                'channels.search': 'Search channels...',
                'channels.categories': 'CATEGORIES',
                'channels.sort': 'SORT',
                'channels.sort.newest': 'NEWEST',
                'channels.sort.rating': 'BY RATING',
                'channels.sort.subscribers': 'BY SUBSCRIBERS',
                'channels.sort.activity': 'BY ACTIVITY',
                'channels.empty': 'No channels found',
                'channels.empty.desc': 'Buy pixels with channels or change filters',
                'channels.my': 'MY',
                'channels.verified': '‚úì',
                'channels.approved': 'üìù',
                'channels.no_pixel': 'No pixel',
                'channels.pixel': '#',
                'channels.subscribers': 'subscribers',
                'channels.rating': 'Rate',
                'channels.open': 'Open',
                
                // Categories
                'category.crypto': 'CRYPTO',
                'category.games': 'GAMES',
                'category.news': 'NEWS',
                'category.tech': 'TECH',
                'category.business': 'BUSINESS',
                'category.education': 'EDUCATION',
                'category.sports': 'SPORTS',
                'category.entertainment': 'ENTERTAINMENT',
                'category.demo': 'DEMO',
                'category.general': 'GENERAL',
                
                // Modals
                'modal.purchase.title': 'BUY PIXEL',
                'modal.purchase.price': 'PRICE',
                'modal.purchase.telegram': 'TELEGRAM CHANNEL',
                'modal.purchase.description': 'DESCRIPTION (OPTIONAL)',
                'modal.purchase.description.placeholder': 'Brief channel description',
                'modal.purchase.telegram.placeholder': '@username or https://t.me/username',
                
                'modal.mass_purchase.title': 'MASS PURCHASE',
                'modal.mass_purchase.pixels': 'PIXELS',
                'modal.mass_purchase.total': 'TOTAL PRICE',
                
                'modal.edit.title': 'IMAGE EDITOR',
                'modal.edit.upload': 'UPLOAD',
                'modal.edit.zoom_in': 'üîç+',
                'modal.edit.zoom_out': 'üîç‚àí',
                'modal.edit.rotate_left': '‚Ü∫',
                'modal.edit.rotate_right': '‚Üª',
                'modal.edit.reset': 'üîÑ',
                'modal.edit.preview': 'PREVIEW',
                'modal.edit.apply': 'APPLY',
                'modal.edit.upload_image': 'Upload image',
                
                'modal.pixel_info.title': 'PIXEL',
                'modal.pixel_info.owner': 'OWNER',
                'modal.pixel_info.categories': 'CATEGORIES',
                'modal.pixel_info.date': 'DATE',
                'modal.pixel_info.price': 'PRICE',
                'modal.pixel_info.not_specified': 'NOT SPECIFIED',
                'modal.pixel_info.unknown': 'UNKNOWN',
                
                'modal.edit_info.title': 'EDIT PIXEL INFORMATION',
                'modal.edit_info.pixels': 'PIXELS',
                'modal.edit_info.categories': 'CATEGORIES (UP TO 3)',
                'modal.edit_info.selected': 'SELECTED',
                'modal.edit_info.none': 'NONE',
                'modal.edit_info.description': 'DESCRIPTION',
                'modal.edit_info.description.placeholder': 'Channel description',
                'modal.edit_info.chars': 'characters',
                
                'modal.submission.title': 'SUBMIT CHANNEL',
                'modal.submission.subtitle': 'Your channel will appear in search after moderation, even without buying a pixel',
                'modal.submission.telegram': 'TELEGRAM CHANNEL',
                'modal.submission.name': 'CHANNEL NAME',
                'modal.submission.name.placeholder': 'Crypto News Today',
                'modal.submission.categories': 'CATEGORIES (SELECT UP TO 3)',
                'modal.submission.description': 'CHANNEL DESCRIPTION',
                'modal.submission.description.placeholder': 'Briefly describe your channel: topic, audience, posting frequency...',
                'modal.submission.contact': 'OWNER CONTACT (OPTIONAL)',
                'modal.submission.contact.placeholder': '@username for contact',
                'modal.submission.options': 'ADDITIONAL OPTIONS',
                'modal.submission.adult': '18+ CONTENT',
                'modal.submission.paid': 'PAID CONTENT',
                'modal.submission.commercial': 'COMMERCIAL CHANNEL',
                'modal.submission.rules': 'MODERATION RULES',
                'modal.submission.rules.active': 'Active channel (posts in last 30 days)',
                'modal.submission.rules.quality': 'Quality content in English language',
                'modal.submission.rules.category': 'Matches selected category',
                'modal.submission.rules.auto': 'Subscriber count is determined automatically',
                'modal.submission.rules.no_spam': 'Prohibited: spam, NSFW, fraud',
                'modal.submission.rules.no_aggregators': 'Aggregator channels without original content',
                'modal.submission.agree': 'I agree to the rules and confirm that I am the channel owner',
                
                'modal.rating.title': 'RATE CHANNEL',
                'modal.rating.current': 'CURRENT RATING',
                'modal.rating.your': 'YOUR RATING',
                'modal.rating.select': 'SELECT RATING',
                'modal.rating.comment': 'COMMENT (OPTIONAL)',
                'modal.rating.comment.placeholder': 'Share your opinion about the channel...',
                'modal.rating.verification': 'VERIFICATION REQUIRED',
                'modal.rating.verification.desc': 'Verification is required to rate channels',
                'modal.rating.excellent': 'Excellent',
                'modal.rating.good': 'Good',
                'modal.rating.normal': 'Normal',
                'modal.rating.bad': 'Bad',
                'modal.rating.very_bad': 'Very Bad',
                
                'modal.about.title': 'ABOUT PROJECT',
                'modal.about.project': 'NFTG-ZONIX',
                'modal.about.subtitle': 'Interactive Telegram channel discovery platform',
                'modal.about.description': 'is an interactive platform for discovering Telegram channels and visually placing them on a pixel grid. The project combines:',
                'modal.about.catalog': 'Telegram channel catalog by topics, tags and popularity',
                'modal.about.grid': 'Visual NFT grid where each block represents a channel',
                'modal.about.upload': 'Ability to upload an image and attach a link to your channel',
                'modal.about.moderation': 'Moderation mechanisms and protection against prohibited content',
                'modal.about.ton': 'TON integration (TON Connect, NFT, transactions)',
                'modal.about.website': 'Full-featured website with search engine and showcase of all placed channels',
                'modal.about.inspiration': 'The project is inspired by',
                'modal.about.inspiration.text': 'and adapted for the Telegram ecosystem.',
                'modal.about.community': 'is not only advertising, but also a community.',
                
                // Wallet
                'wallet.connected': 'Wallet connected',
                'wallet.not_connected': 'Wallet not connected',
                'wallet.balance': 'Balance',
                'wallet.insufficient': 'Insufficient funds',
                'wallet.connect.desc': 'Connect TON wallet for purchasing pixels',
                'wallet.demo': 'Demo wallet',
                'wallet.real': 'Real wallet',
                'wallet.copy': 'Copy address',
                'wallet.disconnect': 'Disconnect',
                'wallet.connecting': 'Connecting wallet...',
                'wallet.verification': 'Verification',
                'wallet.verification.desc': 'For verification, send 0.01 TON to the verification address. Funds will be returned to your wallet within 24 hours.',
                'wallet.verification.send': 'Send 0.01 TON',
                'wallet.verification.demo': 'Demo verification',
                'wallet.verification.pending': 'Checking transaction',
                'wallet.verification.pending.desc': 'Your transaction is being verified. This may take up to 5 minutes.',
                'wallet.verification.check': 'Check now',
                'wallet.verification.cancel': 'Cancel',
                'wallet.verification.success': 'Verification completed! Funds will be returned within 24 hours.',
                'wallet.verification.demo.success': 'Demo verification completed!',
                
                // Notifications
                'notification.app_ready': 'APPLICATION READY!',
                'notification.drag_on': 'DRAG MODE ENABLED',
                'notification.drag_off': 'DRAG MODE DISABLED',
                'notification.seamless_on': 'SEAMLESS MODE ENABLED',
                'notification.seamless_off': 'SEAMLESS MODE DISABLED',
                'notification.pixel_purchased': 'PIXEL #{id} PURCHASED!',
                'notification.pixels_purchased': 'PURCHASED {count} PIXELS!',
                'notification.image_uploaded': 'IMAGE UPLOADED!',
                'notification.image_applied': 'IMAGE PRECISELY APPLIED TO {count} PIXELS!',
                'notification.info_updated': 'INFORMATION UPDATED FOR {count} PIXELS!',
                'notification.channel_submitted': 'APPLICATION FOR CHANNEL "{name}" SUBMITTED FOR MODERATION!',
                'notification.channel_rated': 'CHANNEL {channel} RATED {rating} STARS!',
                'notification.wallet_connected': 'WALLET CONNECTED!',
                'notification.wallet_disconnected': 'WALLET DISCONNECTED',
                'notification.demo_wallet_connected': 'DEMO WALLET CONNECTED!',
                'notification.verification_started': 'DEMO VERIFICATION STARTED...',
                'notification.verification_completed': 'VERIFICATION COMPLETED!',
                'notification.verification_cancelled': 'VERIFICATION CANCELLED',
                'notification.verification_reset': 'VERIFICATION RESET',
                'notification.address_copied': 'ADDRESS COPIED',
                'notification.website_opening': 'OPENING OFFICIAL WEBSITE',
                'notification.channel_opening': 'OPENING CHANNEL',
                'notification.data_exported': 'DATA EXPORTED',
                'notification.data_cleared': 'ALL DATA CLEARED',
                'notification.transform_reset': 'TRANSFORM RESET',
                'notification.preview_ready': 'PREVIEW READY!',
                'notification.max_categories': 'MAXIMUM 3 CATEGORIES',
                'notification.select_image': 'SELECT IMAGE',
                'notification.select_pixels': 'NO PIXELS SELECTED FOR EDITING',
                'notification.own_pixels_only': 'CAN ONLY EDIT YOUR OWN PIXELS',
                'notification.verification_required': 'VERIFICATION REQUIRED TO RATE CHANNELS',
                'notification.connect_wallet': 'CONNECT WALLET FOR PURCHASE',
                'notification.insufficient_funds': 'INSUFFICIENT FUNDS. NEED {needed} TON, AVAILABLE {available} TON',
                'notification.transaction_sent': 'TRANSACTION SENT! {amount} TON',
                'notification.transaction_rejected': 'TRANSACTION REJECTED',
                'notification.verification_transaction_sent': 'VERIFICATION TRANSACTION SENT! {amount} TON',
                'notification.verification_transaction_rejected': 'VERIFICATION TRANSACTION REJECTED',
                'notification.demo_mode_active': 'DEMO WALLET MODE ACTIVATED',
                'notification.processing_demo_payment': 'PROCESSING DEMO PAYMENT...',
                'notification.processing_demo_verification': 'PROCESSING DEMO VERIFICATION...',
                'notification.demo_payment_success': 'DEMO PAYMENT {amount} TON COMPLETED!',
                'notification.demo_verification_success': 'DEMO VERIFICATION {amount} TON COMPLETED!',
                'notification.market_soon': 'MARKET WILL BE AVAILABLE IN THE NEXT UPDATE',
                'notification.transaction_processing': 'SENDING TRANSACTION...',
                'notification.verification_transaction_processing': 'SENDING VERIFICATION TRANSACTION...',
                'notification.checking_verification': 'CHECKING VERIFICATION STATUS...',
                'notification.wallet_error': 'WALLET ERROR',
                'notification.payment_error': 'PAYMENT ERROR',
                'notification.verification_error': 'VERIFICATION ERROR',
                'notification.connection_cancelled': 'CONNECTION CANCELLED',
                'notification.network_error': 'NETWORK PROBLEM',
                'notification.config_error': 'WALLET CONFIGURATION ERROR',
                'notification.ton_connect_unavailable': 'TON CONNECT UNAVAILABLE',
                'notification.wallet_not_available': 'COULD NOT OPEN WALLET',
                'notification.language_changed': 'LANGUAGE CHANGED TO {language}',
                
                // Errors
                'error.form': 'FORM ERROR',
                'error.telegram_link': 'ENTER CORRECT TELEGRAM CHANNEL',
                'error.channel_name': 'ENTER CHANNEL NAME',
                'error.select_categories': 'SELECT AT LEAST ONE CATEGORY',
                'error.channel_description': 'ENTER CHANNEL DESCRIPTION',
                'error.accept_terms': 'MUST AGREE TO TERMS',
                'error.select_rating': 'SELECT RATING FROM 1 TO 5 STARS',
                'error.upload_image': 'UPLOAD IMAGE',
                'error.unknown': 'AN ERROR OCCURRED',
                'error.app_init': 'APPLICATION STARTUP ERROR',
                'error.init': 'APPLICATION INITIALIZATION ERROR',
                'error.channel_link_unavailable': 'CHANNEL LINK UNAVAILABLE',
                
                // Tooltips
                'tooltip.pixel': 'Pixel #{id}',
                'tooltip.pixel_available': 'Pixel #{id} - Available for purchase',
                'tooltip.pixel_owned': 'Pixel #{id}\nOwner: {owner}\nCategory: {category}',
                
                // Pixel info
                'pixel.owner': 'Owner',
                'pixel.category': 'Category',
                'pixel.categories': 'Categories',
                'pixel.date': 'Date',
                'pixel.price': 'Price',
                'pixel.not_specified': 'Not specified',
                'pixel.unknown_date': 'Unknown',
                'pixel.unknown_owner': '@unknown',
                
                // Time formats
                'time.today': 'Today',
                'time.yesterday': 'Yesterday',
                'time.days_ago': '{count} days ago',
                'time.just_now': 'Just now',
                'time.minutes_ago': '{count} minutes ago',
                'time.hours_ago': '{count} hours ago',
                
                // Stats
                'stats.total_channels': 'Total channels',
                'stats.pixel_channels': 'With pixels',
                'stats.approved_channels': 'Approved applications',
                'stats.owned_channels': 'Your channels',
                'stats.avg_subscribers': 'Average subscribers',
                'stats.avg_rating': 'Average rating',
                'stats.verification_status': 'Status',
                'stats.verification_date': 'Verification date',
                'stats.verification_type': 'Type',
                'stats.verification_demo': 'Demo verification',
                'stats.not_verified': 'Not verified',
                'stats.verified': 'Verified',
                'stats.most_active': 'Most active',
                'stats.trending': 'Trending',
                'stats.by_categories': 'By categories',
                'stats.posts_per_month': '/month',
                
                // Loading states
                'loading.channels': 'Loading channels...',
                'loading.transactions': 'Loading transactions...',
                'loading.processing': 'Processing...',
                'loading.connecting': 'Connecting...',
                'loading.sending': 'Sending...',
                'loading.verifying': 'Verifying...',
                
                // Empty states
                'empty.no_channels': 'No channels',
                'empty.no_transactions': 'No transactions yet',
                'empty.no_pixels': 'No pixels',
                'empty.no_selection': 'Nothing selected'
            }
        };
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —è–∑—ã–∫
        this.loadLanguage();
    }
    
    loadLanguage() {
        const saved = localStorage.getItem('nftg-language');
        if (saved && this.translations[saved]) {
            this.currentLanguage = saved;
        }
    }
    
    saveLanguage() {
        localStorage.setItem('nftg-language', this.currentLanguage);
    }
    
    setLanguage(lang) {
        if (this.translations[lang]) {
            this.currentLanguage = lang;
            this.saveLanguage();
            this.updateAllTexts();
            
            // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–º–µ–Ω–µ —è–∑—ã–∫–∞
            const langNames = { ru: '–†—É—Å—Å–∫–∏–π', en: 'English' };
            if (window.MiniUtils) {
                window.MiniUtils.showNotification(
                    this.t('notification.language_changed', { language: langNames[lang] }),
                    'success'
                );
            }
            
            console.log(`Language changed to: ${lang}`);
        }
    }
    
    getCurrentLanguage() {
        return this.currentLanguage;
    }
    
    getAvailableLanguages() {
        return Object.keys(this.translations);
    }
    
    t(key, params = {}) {
        const translation = this.translations[this.currentLanguage]?.[key] || key;
        
        // –ó–∞–º–µ–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ —Å—Ç—Ä–æ–∫–µ
        return translation.replace(/\{(\w+)\}/g, (match, param) => {
            return params[param] || match;
        });
    }
    
    updateAllTexts() {
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        this.updateElement('mode-display', this.getCurrentModeText());
        this.updateStatusBar();
        this.updateModeTabs();
        this.updateControls();
        this.updateMenu();
        this.updateModals();
        this.updateChannelSidebar();
        this.updateTooltips();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        this.updatePixelTooltips();
        this.updateActionButtons();
        
        console.log('All texts updated for language:', this.currentLanguage);
    }
    
    updateElement(id, text) {
        const element = document.getElementById(id);
        if (element && text) {
            element.textContent = text;
        }
    }
    
    updateStatusBar() {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å-–±–∞—Ä
        const statusLabels = {
            'selected-count': this.t('status.selected'),
            'owned-count': this.t('status.owned'),
            'cost-display': this.t('status.cost')
        };
        
        Object.entries(statusLabels).forEach(([id, label]) => {
            const element = document.getElementById(id);
            if (element) {
                const parentLabel = element.parentElement?.querySelector('.status-label');
                if (parentLabel) {
                    parentLabel.textContent = label + ':';
                }
            }
        });
    }
    
    updateModeTabs() {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Ä–µ–∂–∏–º–æ–≤
        const modeButtons = [
            { id: 'view-mode', key: 'mode.view' },
            { id: 'buy-mode', key: 'mode.buy' },
            { id: 'mass-buy-mode', key: 'mode.mass-buy' },
            { id: 'edit-mode', key: 'mode.edit' },
            { id: 'about-mode', key: 'mode.about' }
        ];
        
        modeButtons.forEach(({ id, key }) => {
            const button = document.getElementById(id);
            if (button) {
                const label = button.querySelector('.mode-label');
                if (label) {
                    label.textContent = this.t(key);
                }
            }
        });
    }
    
    updateControls() {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—ã
        const controls = [
            { id: 'zoom-in', key: 'control.zoom.in' },
            { id: 'zoom-out', key: 'control.zoom.out' },
            { id: 'center', key: 'control.center' },
            { id: 'drag-mode-btn', key: 'control.drag' },
            { id: 'language-btn', key: 'control.language' }
        ];
        
        controls.forEach(({ id, key }) => {
            const element = document.getElementById(id);
            if (element) {
                element.title = this.t(key);
            }
        });
    }
    
    updateMenu() {
        // –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        const menuItems = [
            { id: 'channels-navigator-btn', titleKey: 'menu.channels', descKey: 'menu.channels.desc' },
            { id: 'submit-channel-btn', titleKey: 'menu.submit', descKey: 'menu.submit.desc' },
            { id: 'market-btn', titleKey: 'menu.market', descKey: 'menu.market.desc' },
            { id: 'website-btn', titleKey: 'menu.website', descKey: 'menu.website.desc' },
            { id: 'verification-btn', titleKey: 'menu.verification', descKey: 'menu.verification.desc' },
            { id: 'stats-btn', titleKey: 'menu.stats', descKey: 'menu.stats.desc' }
        ];
        
        menuItems.forEach(({ id, titleKey, descKey }) => {
            const button = document.getElementById(id);
            if (button) {
                const title = button.querySelector('.menu-title');
                const desc = button.querySelector('.menu-subtitle');
                
                if (title) title.textContent = this.t(titleKey);
                if (desc) desc.textContent = this.t(descKey);
            }
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ—à–µ–ª–µ–∫
        const walletTitle = document.getElementById('wallet-title');
        const walletSubtitle = document.getElementById('wallet-subtitle');
        
        if (walletTitle && !window.miniWallet?.isConnected) {
            walletTitle.textContent = this.t('menu.wallet.connect');
        }
        if (walletSubtitle && !window.miniWallet?.isConnected) {
            walletSubtitle.textContent = this.t('menu.wallet.desc');
        }
    }
    
    updateModals() {
        // –û–±–Ω–æ–≤–ª—è–µ–º About Modal content
        this.updateAboutModal();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥—Ä—É–≥–∏–µ –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
        this.updatePurchaseModals();
        this.updateChannelModals();
        this.updateEditorModal();
    }

    updateAboutModal() {
        // Update About Modal title
        const aboutModalTitle = document.querySelector('#about-modal h3');
        if (aboutModalTitle) {
            aboutModalTitle.textContent = this.t('modal.about.title');
        }
        
        // Update project title and subtitle
        const projectTitle = document.querySelector('.project-title');
        if (projectTitle) {
            projectTitle.textContent = this.t('modal.about.project');
        }
        
        const projectSubtitle = document.querySelector('.project-subtitle');
        if (projectSubtitle) {
            projectSubtitle.textContent = this.t('modal.about.subtitle');
        }
        
        // Update main description
        const aboutDescription = document.querySelector('.about-description p');
        if (aboutDescription) {
            aboutDescription.innerHTML = `<strong>${this.t('modal.about.project')}</strong> ‚Äî ${this.t('modal.about.description')}`;
        }
        
        // Update feature items
        const featureItems = document.querySelectorAll('.feature-item');
        const featureKeys = [
            'modal.about.catalog',
            'modal.about.grid', 
            'modal.about.upload',
            'modal.about.moderation',
            'modal.about.ton',
            'modal.about.website'
        ];
        
        featureItems.forEach((item, index) => {
            const featureText = item.querySelector('.feature-text');
            if (featureText && featureKeys[index]) {
                featureText.textContent = this.t(featureKeys[index]);
            }
        });
        
        // Update inspiration section
        const inspirationSection = document.querySelector('.inspiration-section');
        if (inspirationSection) {
            const paragraphs = inspirationSection.querySelectorAll('p');
            if (paragraphs.length >= 2) {
                paragraphs[0].innerHTML = `${this.t('modal.about.inspiration')} <strong>Million Dollar Homepage</strong> ${this.t('modal.about.inspiration.text')}`;
                paragraphs[1].innerHTML = `<strong>${this.t('modal.about.project')}</strong> ${this.t('modal.about.community')}`;
            }
        }
        
        // Update modal action buttons
        const websiteButton = document.getElementById('visit-website-about');
        if (websiteButton) {
            websiteButton.textContent = `üåê ${this.t('button.website')}`;
        }
        
        const closeButton = document.getElementById('close-about');
        if (closeButton) {
            closeButton.textContent = `‚ùå ${this.t('button.close')}`;
        }
    }

    updatePurchaseModals() {
        // Update Purchase Modal
        const purchaseTitle = document.querySelector('#purchase-modal h3');
        if (purchaseTitle) {
            const pixelId = document.getElementById('purchase-pixel-id')?.textContent || '0';
            purchaseTitle.innerHTML = `üí∞ ${this.t('modal.purchase.title')} #<span id="purchase-pixel-id">${pixelId}</span>`;
        }
        
        // Update form labels
        const telegramLabel = document.querySelector('#purchase-modal label[for="telegram-link"]');
        if (telegramLabel) {
            telegramLabel.textContent = `üîó ${this.t('modal.purchase.telegram')}:`;
        }
        
        const descLabel = document.querySelector('#purchase-modal label[for="pixel-description"]');
        if (descLabel) {
            descLabel.textContent = `üìù ${this.t('modal.purchase.description')}:`;
        }
        
        // Update placeholders
        const telegramInput = document.getElementById('telegram-link');
        if (telegramInput) {
            telegramInput.placeholder = this.t('modal.purchase.telegram.placeholder');
        }
        
        const descInput = document.getElementById('pixel-description');
        if (descInput) {
            descInput.placeholder = this.t('modal.purchase.description.placeholder');
        }
        
        // Update buttons
        const confirmPurchase = document.getElementById('confirm-purchase');
        if (confirmPurchase) {
            confirmPurchase.textContent = `üí∞ ${this.t('button.buy')}`;
        }
        
        const cancelPurchase = document.getElementById('cancel-purchase');
        if (cancelPurchase) {
            cancelPurchase.textContent = `‚ùå ${this.t('button.cancel')}`;
        }
        
        // Update Mass Purchase Modal
        const massPurchaseTitle = document.querySelector('#mass-purchase-modal h3');
        if (massPurchaseTitle) {
            massPurchaseTitle.textContent = `üõí ${this.t('modal.mass_purchase.title')}`;
        }
        
        // Update mass purchase labels
        const massPixelsLabel = document.querySelector('#mass-purchase-modal p:first-of-type');
        if (massPixelsLabel) {
            const count = document.getElementById('mass-count')?.textContent || '0';
            massPixelsLabel.innerHTML = `${this.t('modal.mass_purchase.pixels')}: <span id="mass-count">${count}</span>`;
        }
        
        const massTotalLabel = document.querySelector('#mass-purchase-modal p:nth-of-type(2)');
        if (massTotalLabel) {
            const total = document.getElementById('mass-total')?.textContent || '0';
            massTotalLabel.innerHTML = `${this.t('modal.mass_purchase.total')}: <span id="mass-total">${total}</span> TON`;
        }

        // Update mass purchase form labels
        const massTelegramLabel = document.querySelector('#mass-purchase-modal label[for="mass-telegram-link"]');
        if (massTelegramLabel) {
            massTelegramLabel.textContent = `üîó ${this.t('modal.purchase.telegram')}:`;
        }
        
        const massDescLabel = document.querySelector('#mass-purchase-modal label[for="mass-pixel-description"]');
        if (massDescLabel) {
            massDescLabel.textContent = `üìù ${this.t('modal.purchase.description')}:`;
        }

        // Update mass purchase placeholders
        const massTelegramInput = document.getElementById('mass-telegram-link');
        if (massTelegramInput) {
            massTelegramInput.placeholder = this.t('modal.purchase.telegram.placeholder');
        }
        
        const massDescInput = document.getElementById('mass-pixel-description');
        if (massDescInput) {
            massDescInput.placeholder = this.t('modal.purchase.description.placeholder');
        }

        // Update mass purchase buttons
        const confirmMassPurchase = document.getElementById('confirm-mass-purchase');
        if (confirmMassPurchase) {
            confirmMassPurchase.textContent = `üõí ${this.t('button.buy')} ${this.t('mode.mass-buy')}`;
        }
        
        const cancelMassPurchase = document.getElementById('cancel-mass-purchase');
        if (cancelMassPurchase) {
            cancelMassPurchase.textContent = `‚ùå ${this.t('button.cancel')}`;
        }
    }

    updateChannelModals() {
        // Update Channel Submission Modal
        const submissionTitle = document.querySelector('#channel-submission-modal h3');
        if (submissionTitle) {
            submissionTitle.textContent = `üìù ${this.t('modal.submission.title')}`;
        }

        // Update subtitle
        const submissionSubtitle = document.querySelector('#channel-submission-modal p');
        if (submissionSubtitle && submissionSubtitle.textContent.includes('–º–æ–¥–µ—Ä–∞—Ü–∏–∏')) {
            submissionSubtitle.textContent = this.t('modal.submission.subtitle');
        }
        
        // Update channel submission labels
        const submissionLabels = [
            { selector: 'label[for="submission-telegram-link"]', key: 'modal.submission.telegram' },
            { selector: 'label[for="submission-channel-name"]', key: 'modal.submission.name' },
            { selector: 'label[for="submission-categories"]', key: 'modal.submission.categories' },
            { selector: 'label[for="submission-description"]', key: 'modal.submission.description' },
            { selector: 'label[for="submission-owner-contact"]', key: 'modal.submission.contact' }
        ];
        
        submissionLabels.forEach(({ selector, key }) => {
            const label = document.querySelector(`#channel-submission-modal ${selector}`);
            if (label) {
                const isRequired = !key.includes('contact');
                label.textContent = this.t(key) + (isRequired ? ' *' : '');
            }
        });
        
        // Update placeholders
        const submissionInputs = [
            { id: 'submission-telegram-link', key: 'modal.purchase.telegram.placeholder' },
            { id: 'submission-channel-name', key: 'modal.submission.name.placeholder' },
            { id: 'submission-description', key: 'modal.submission.description.placeholder' },
            { id: 'submission-owner-contact', key: 'modal.submission.contact.placeholder' }
        ];
        
        submissionInputs.forEach(({ id, key }) => {
            const input = document.getElementById(id);
            if (input) {
                input.placeholder = this.t(key);
            }
        });

        // Update rules section
        const rulesTitle = document.querySelector('#channel-submission-modal .terms-section h4');
        if (rulesTitle) {
            rulesTitle.textContent = `üìã ${this.t('modal.submission.rules')}:`;
        }

        // Update rules list
        const rulesList = document.querySelector('#channel-submission-modal .rules-list');
        if (rulesList) {
            const rulesKeys = [
                'modal.submission.rules.active',
                'modal.submission.rules.quality',
                'modal.submission.rules.category',
                'modal.submission.rules.auto',
                'modal.submission.rules.no_spam',
                'modal.submission.rules.no_aggregators'
            ];
            
            const rulesItems = rulesList.querySelectorAll('li');
            rulesItems.forEach((item, index) => {
                if (rulesKeys[index]) {
                    const icon = item.textContent.includes('‚úÖ') ? '‚úÖ ' : '‚ùå ';
                    item.textContent = icon + this.t(rulesKeys[index]);
                }
            });
        }

        // Update terms checkbox
        const termsCheckboxLabel = document.querySelector('#channel-submission-modal .terms-checkbox .checkbox-label');
        if (termsCheckboxLabel) {
            termsCheckboxLabel.textContent = this.t('modal.submission.agree');
        }
        
        // Update submission buttons
        const submitButton = document.getElementById('submit-channel-application');
        if (submitButton) {
            submitButton.textContent = `üì§ ${this.t('button.submit')}`;
        }
        
        const cancelSubmission = document.getElementById('cancel-channel-submission');
        if (cancelSubmission) {
            cancelSubmission.textContent = `‚ùå ${this.t('button.cancel')}`;
        }

        // Update Rating Modal
        const ratingTitle = document.querySelector('#channel-rating-modal h3');
        if (ratingTitle) {
            ratingTitle.textContent = `‚≠ê ${this.t('modal.rating.title')}`;
        }

        // Update rating labels
        const currentRatingLabel = document.querySelector('#channel-rating-modal .current-rating');
        if (currentRatingLabel && currentRatingLabel.textContent.includes('–¢–ï–ö–£–©–ò–ô') || currentRatingLabel?.textContent.includes('CURRENT')) {
            const ratingValue = currentRatingLabel.querySelector('.rating-value')?.textContent || '0';
            currentRatingLabel.innerHTML = `${this.t('modal.rating.current')}: <span class="rating-value">${ratingValue}</span> ‚≠ê`;
        }

        const yourRatingLabel = document.querySelector('#channel-rating-modal .rating-label');
        if (yourRatingLabel) {
            yourRatingLabel.textContent = `${this.t('modal.rating.your')}:`;
        }

        const ratingText = document.getElementById('rating-text');
        if (ratingText && (ratingText.textContent.includes('–í–´–ë–ï–†–ò–¢–ï') || ratingText.textContent.includes('SELECT'))) {
            ratingText.textContent = this.t('modal.rating.select');
        }

        // Update rating comment placeholder
        const ratingComment = document.getElementById('rating-comment');
        if (ratingComment) {
            ratingComment.placeholder = this.t('modal.rating.comment.placeholder');
        }

        // Update rating comment label
        const ratingCommentLabel = document.querySelector('#channel-rating-modal label[for="rating-comment"]');
        if (ratingCommentLabel) {
            ratingCommentLabel.textContent = `üí¨ ${this.t('modal.rating.comment')}:`;
        }

        // Update verification notice
        const verificationNoticeTitle = document.querySelector('#channel-rating-modal .notice-title');
        if (verificationNoticeTitle) {
            verificationNoticeTitle.textContent = this.t('modal.rating.verification');
        }

        const verificationNoticeDesc = document.querySelector('#channel-rating-modal .notice-subtitle');
        if (verificationNoticeDesc) {
            verificationNoticeDesc.textContent = this.t('modal.rating.verification.desc');
        }

        // Update rating buttons
        const submitRating = document.getElementById('submit-rating');
        if (submitRating) {
            submitRating.textContent = `‚≠ê ${this.t('button.rate')}`;
        }

        const verifyAccount = document.getElementById('verify-account');
        if (verifyAccount) {
            verifyAccount.textContent = `‚úÖ ${this.t('button.verify')}`;
        }

        const cancelRating = document.getElementById('cancel-rating');
        if (cancelRating) {
            cancelRating.textContent = `‚ùå ${this.t('button.cancel')}`;
        }
    }

    updateEditorModal() {
        // Update Editor Modal
        const editorTitle = document.querySelector('#editor-modal h3');
        if (editorTitle) {
            editorTitle.textContent = `üé® ${this.t('modal.edit.title')}`;
        }

        // Update editor buttons
        const editorButtons = [
            { selector: '.editor-controls button[onclick*="image-input"]', key: 'modal.edit.upload', icon: 'üìÅ' },
            { id: 'zoom-in-editor', key: 'modal.edit.zoom_in' },
            { id: 'zoom-out-editor', key: 'modal.edit.zoom_out' },
            { id: 'rotate-left', key: 'modal.edit.rotate_left' },
            { id: 'rotate-right', key: 'modal.edit.rotate_right' },
            { id: 'reset-editor', key: 'modal.edit.reset' },
            { id: 'preview-editor', key: 'modal.edit.preview', icon: 'üëÅÔ∏è' },
            { id: 'apply-editor', key: 'modal.edit.apply', icon: '‚úÖ' },
            { id: 'close-editor', key: 'button.close', icon: '‚ùå' }
        ];

        editorButtons.forEach(({ id, selector, key, icon }) => {
            const button = id ? document.getElementById(id) : document.querySelector(selector);
            if (button) {
                const text = this.t(key);
                button.textContent = icon ? `${icon} ${text}` : text;
            }
        });

        // Update upload message
        const uploadMessage = document.querySelector('#editor-modal .canvas-container');
        if (uploadMessage && uploadMessage.textContent.includes('–ó–∞–≥—Ä—É–∑–∏—Ç–µ') || uploadMessage?.textContent.includes('Upload')) {
            // This will be updated when canvas is drawn
        }

        // Update Pixel Info Edit Modal
        const pixelInfoEditTitle = document.querySelector('#pixel-info-edit-modal h3');
        if (pixelInfoEditTitle) {
            const pixelCount = document.getElementById('edit-pixel-count')?.textContent || '0';
            pixelInfoEditTitle.innerHTML = `üìù ${this.t('modal.edit_info.title')} <span id="edit-pixel-count">${pixelCount}</span>`;
        }

        // Update pixel info edit labels
        const editInfoLabels = [
            { selector: 'label[for="edit-categories"]', key: 'modal.edit_info.categories' },
            { selector: 'label[for="edit-telegram-link"]', key: 'modal.purchase.telegram' },
            { selector: 'label[for="edit-description"]', key: 'modal.edit_info.description' }
        ];

        editInfoLabels.forEach(({ selector, key }) => {
            const label = document.querySelector(`#pixel-info-edit-modal ${selector}`);
            if (label) {
                const icon = label.textContent.match(/^[^\s]+/)?.[0] || '';
                label.textContent = `${icon} ${this.t(key)}:`;
            }
        });

        // Update selected categories display
        const selectedCategoriesText = document.getElementById('selected-categories-text');
        if (selectedCategoriesText && (selectedCategoriesText.textContent === '–ù–ï–¢' || selectedCategoriesText.textContent === 'NONE')) {
            selectedCategoriesText.textContent = this.t('modal.edit_info.none');
        }

        const selectedCategoriesLabel = document.querySelector('#pixel-info-edit-modal .selected-categories');
        if (selectedCategoriesLabel) {
            const textSpan = selectedCategoriesLabel.querySelector('#selected-categories-text');
            if (textSpan) {
                selectedCategoriesLabel.innerHTML = `${this.t('modal.edit_info.selected')}: <span id="selected-categories-text">${textSpan.textContent}</span>`;
            }
        }

        // Update character counter
        const charCounter = document.querySelector('#pixel-info-edit-modal .char-counter');
        if (charCounter) {
            const chars = document.getElementById('edit-description-chars')?.textContent || '0';
            charCounter.innerHTML = `<span id="edit-description-chars">${chars}</span>/200 ${this.t('modal.edit_info.chars')}`;
        }

        // Update pixel info edit buttons
        const savePixelInfo = document.getElementById('save-pixel-info');
        if (savePixelInfo) {
            savePixelInfo.textContent = `üíæ ${this.t('button.save')}`;
        }

        const cancelPixelInfoEdit = document.getElementById('cancel-pixel-info-edit');
        if (cancelPixelInfoEdit) {
            cancelPixelInfoEdit.textContent = `‚ùå ${this.t('button.cancel')}`;
        }

        // Update Pixel Info Modal
        const pixelInfoTitle = document.querySelector('#pixel-info-modal h3');
        if (pixelInfoTitle) {
            const pixelId = document.getElementById('info-pixel-id')?.textContent || '0';
            pixelInfoTitle.innerHTML = `‚ÑπÔ∏è ${this.t('modal.pixel_info.title')} #<span id="info-pixel-id">${pixelId}</span>`;
        }

        // Update pixel info labels
        const pixelInfoLabels = [
            { selector: '.info-row:nth-child(1) .info-label', key: 'modal.pixel_info.owner' },
            { selector: '.info-row:nth-child(2) .info-label', key: 'modal.pixel_info.categories' },
            { selector: '.info-row:nth-child(3) .info-label', key: 'modal.pixel_info.date' },
            { selector: '.info-row:nth-child(4) .info-label', key: 'modal.pixel_info.price' }
        ];

        pixelInfoLabels.forEach(({ selector, key }) => {
            const label = document.querySelector(`#pixel-info-modal ${selector}`);
            if (label) {
                const icon = label.textContent.match(/^[^\s]+/)?.[0] || '';
                label.textContent = `${icon} ${this.t(key)}:`;
            }
        });

        // Update pixel info buttons
        const visitChannel = document.getElementById('visit-channel');
        if (visitChannel) {
            visitChannel.textContent = `üîó ${this.t('button.visit')}`;
        }

        const closePixelInfo = document.getElementById('close-pixel-info');
        if (closePixelInfo) {
            closePixelInfo.textContent = `‚ùå ${this.t('button.close')}`;
        }
    }
    
    updateChannelSidebar() {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–∞–π–¥–±–∞—Ä –∫–∞–Ω–∞–ª–æ–≤
        const searchInput = document.getElementById('search-input');
        if (searchInput) {
            searchInput.placeholder = this.t('channels.search');
        }

        // Update sidebar title
        const sidebarTitle = document.querySelector('#channel-sidebar .sidebar-header h3');
        if (sidebarTitle) {
            sidebarTitle.textContent = `üì∫ ${this.t('channels.title')}`;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        const categoryTags = document.querySelectorAll('#category-filters .filter-tag');
        categoryTags.forEach(tag => {
            const category = tag.dataset.category;
            if (category) {
                const icon = tag.textContent.match(/^[^\s]+/)?.[0] || '';
                tag.textContent = icon + ' ' + this.t('category.' + category.toLowerCase());
            }
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É
        const sortOptions = document.querySelectorAll('#sort-select option');
        const sortKeys = ['newest', 'rating', 'subscribers', 'activity'];
        sortOptions.forEach((option, index) => {
            if (sortKeys[index]) {
                const icon = option.textContent.match(/^[^\s]+/)?.[0] || '';
                option.textContent = icon + ' ' + this.t('channels.sort.' + sortKeys[index]);
            }
        });

        // Update filter labels
        const filterLabels = document.querySelectorAll('#channel-sidebar .filter-group label');
        filterLabels.forEach(label => {
            if (label.textContent.includes('–ö–ê–¢–ï–ì–û–†–ò–ò') || label.textContent.includes('CATEGORIES')) {
                label.textContent = this.t('channels.categories') + ':';
            } else if (label.textContent.includes('–°–û–†–¢–ò–†–û–í–ö–ê') || label.textContent.includes('SORT')) {
                label.textContent = this.t('channels.sort') + ':';
            }
        });
    }
    
    updateTooltips() {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç—É–ª—Ç–∏–ø—ã –ø–∏–∫—Å–µ–ª–µ–π
        if (window.miniGrid) {
            window.miniGrid.updatePixelDisplay();
        }
    }
    
    updatePixelTooltips() {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç—É–ª—Ç–∏–ø—ã –≤—Å–µ—Ö –ø–∏–∫—Å–µ–ª–µ–π
        document.querySelectorAll('.pixel').forEach(pixel => {
            const pixelId = parseInt(pixel.dataset.id);
            const pixelData = window.miniGrid?.pixels.get(pixelId);
            
            if (pixelData) {
                pixel.title = this.t('tooltip.pixel_owned', {
                    id: pixelId,
                    owner: pixelData.owner,
                    category: pixelData.category || this.t('pixel.not_specified')
                });
            } else {
                pixel.title = this.t('tooltip.pixel_available', { id: pixelId });
            }
        });
    }
    
    updateActionButtons() {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        const actionButton = document.getElementById('action-button');
        if (actionButton && window.miniApp) {
            const mode = window.miniApp.getCurrentMode();
            const selectedCount = window.miniApp.getSelectedPixels().length;
            
            let buttonText = this.t('button.buy');
            
            switch (mode) {
                case 'buy':
                    buttonText = selectedCount > 1 ? 
                        this.t('button.buy.multiple', { count: selectedCount }) :
                        this.t('button.buy.single');
                    break;
                case 'mass-buy':
                    buttonText = this.t('button.buy.mass', { count: selectedCount });
                    break;
                case 'edit':
                    buttonText = selectedCount > 1 ? 
                        this.t('button.edit') :
                        this.t('button.edit.single');
                    break;
            }
            
            actionButton.textContent = buttonText;
        }
    }
    
    getCurrentModeText() {
        if (window.miniApp) {
            const mode = window.miniApp.getCurrentMode();
            return this.t('header.mode.' + mode);
        }
        return this.t('header.mode.view');
    }
    
    formatCurrency(amount, currency = 'TON') {
        return `${amount} ${currency}`;
    }
    
    formatCount(count) {
        return count.toString();
    }
    
    formatDate(dateString) {
        if (!dateString) return this.t('pixel.unknown_date');
        
        try {
            const date = new Date(dateString);
            const now = new Date();
            const diffTime = now - date;
            const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));
            
            if (diffDays === 0) {
                return this.t('time.today');
            } else if (diffDays === 1) {
                return this.t('time.yesterday');
            } else if (diffDays < 7) {
                return this.t('time.days_ago', { count: diffDays });
            } else {
                // –î–ª—è –±–æ–ª–µ–µ —Å—Ç–∞—Ä—ã—Ö –¥–∞—Ç –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ã—á–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
                const day = date.getDate().toString().padStart(2, '0');
                const month = (date.getMonth() + 1).toString().padStart(2, '0');
                const year = date.getFullYear();
                return `${day}.${month}.${year}`;
            }
        } catch (error) {
            return this.t('pixel.unknown_date');
        }
    }
    
    getCategoryIcon(category) {
        const icons = {
            'crypto': 'üí∞',
            'games': 'üéÆ',
            'news': 'üì∞',
            'tech': 'üíª',
            'business': 'üíº',
            'education': 'üìö',
            'sports': '‚öΩ',
            'entertainment': 'üé¨',
            'demo': 'üß™',
            'general': 'üìÅ'
        };
        return icons[category.toLowerCase()] || 'üìÅ';
    }
    
    getCategoryName(category) {
        return this.t('category.' + category.toLowerCase());
    }
    
    // –ú–µ—Ç–æ–¥—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    updateModalTitle(modalId, titleKey) {
        const modal = document.getElementById(modalId);
        if (modal) {
            const title = modal.querySelector('h3');
            if (title) {
                title.textContent = this.t(titleKey);
            }
        }
    }
    
    updateModalContent(modalId, contentMap) {
        const modal = document.getElementById(modalId);
        if (modal) {
            Object.entries(contentMap).forEach(([elementId, translationKey]) => {
                const element = document.getElementById(elementId);
                if (element) {
                    if (element.tagName === 'INPUT' || element.tagName === 'TEXTAREA') {
                        element.placeholder = this.t(translationKey);
                    } else {
                        element.textContent = this.t(translationKey);
                    }
                }
            });
        }
    }
    
    // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    updateChannelCard(channelData) {
        return {
            name: channelData.name,
            description: channelData.description,
            category: this.getCategoryName(channelData.category),
            subscribers: this.formatCount(channelData.subscribers) + ' ' + this.t('channels.subscribers'),
            myLabel: this.t('channels.my'),
            noPixelLabel: this.t('channels.no_pixel'),
            rateLabel: this.t('channels.rating'),
            openLabel: this.t('channels.open')
        };
    }
    
    updateWalletInfo(walletData) {
        return {
            connected: this.t('wallet.connected'),
            notConnected: this.t('wallet.not_connected'),
            balance: this.t('wallet.balance'),
            demo: this.t('wallet.demo'),
            copy: this.t('wallet.copy'),
            disconnect: this.t('wallet.disconnect')
        };
    }
    
    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    getCategoryTranslations() {
        return {
            '–ö—Ä–∏–ø—Ç–∞': this.t('category.crypto'),
            '–ò–≥—Ä—ã': this.t('category.games'),
            '–ù–æ–≤–æ—Å—Ç–∏': this.t('category.news'),
            '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏': this.t('category.tech'),
            '–ë–∏–∑–Ω–µ—Å': this.t('category.business'),
            '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ': this.t('category.education'),
            '–°–ø–æ—Ä—Ç': this.t('category.sports'),
            '–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è': this.t('category.entertainment'),
            '–î–µ–º–æ': this.t('category.demo'),
            '–û–±—â–µ–µ': this.t('category.general')
        };
    }
    
    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    getNotificationText(key, params = {}) {
        return this.t('notification.' + key, params);
    }
    
    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤ –æ—à–∏–±–æ–∫
    getErrorText(key, params = {}) {
        return this.t('error.' + key, params);
    }
    
    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤ –∫–Ω–æ–ø–æ–∫
    getButtonText(key, params = {}) {
        return this.t('button.' + key, params);
    }
    
    // –î–µ–±–∞–≥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    getDebugInfo() {
        return {
            currentLanguage: this.currentLanguage,
            availableLanguages: this.getAvailableLanguages(),
            translationsCount: {
                ru: Object.keys(this.translations.ru).length,
                en: Object.keys(this.translations.en).length
            }
        };
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
window.MiniI18n = new MiniI18n();

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
window.t = (key, params) => window.MiniI18n.t(key, params);

console.log('‚úÖ MiniI18n system initialized with language:', window.MiniI18n.getCurrentLanguage());