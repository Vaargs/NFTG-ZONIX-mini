// === MINI MODERATOR MODULE ===

class MiniModerator {
    constructor() {
        this.moderatorUsername = '@VladGaar';
        this.isModerator = false;
        this.pendingSubmissions = [];
        this.flaggedPixels = [];
        this.moderationHistory = [];
        this.isModeratorPanelOpen = false;
        
        this.init();
    }

    init() {
        this.checkModeratorStatus();
        this.loadModerationData();
        this.createModeratorUI();
        this.setupEventListeners();
        console.log('‚úÖ MiniModerator initialized');
    }

    checkModeratorStatus() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º
        const currentUser = window.miniGrid ? window.miniGrid.currentUser : '@demo_user';
        
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram WebApp –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
        if (window.Telegram?.WebApp?.initDataUnsafe?.user) {
            const telegramUser = window.Telegram.WebApp.initDataUnsafe.user;
            const telegramUsername = telegramUser.username ? `@${telegramUser.username}` : null;
            
            if (telegramUsername === this.moderatorUsername) {
                this.isModerator = true;
                console.log('üõ°Ô∏è Moderator access granted for:', telegramUsername);
            }
        }
        
        // Fallback –¥–ª—è –¥–µ–º–æ —Ä–µ–∂–∏–º–∞
        if (currentUser === this.moderatorUsername || currentUser === '@demo_user') {
            this.isModerator = true;
            console.log('üõ°Ô∏è Moderator access granted (demo mode)');
        }
        
        if (this.isModerator) {
            this.showModeratorNotification();
        }
    }

    showModeratorNotification() {
        setTimeout(() => {
            MiniUtils.showNotification('–†–µ–∂–∏–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω', 'success');
        }, 1000);
    }

    createModeratorUI() {
        if (!this.isModerator) return;

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        this.addModeratorButton();
        
        // –°–æ–∑–¥–∞–µ–º –ø–∞–Ω–µ–ª—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
        this.createModeratorPanel();
    }

    addModeratorButton() {
        const menuItems = document.querySelector('.menu-items');
        if (!menuItems || document.getElementById('moderator-btn')) return;

        const moderatorButton = document.createElement('button');
        moderatorButton.className = 'menu-item moderator-item';
        moderatorButton.id = 'moderator-btn';
        moderatorButton.innerHTML = `
            <span class="menu-icon">üõ°Ô∏è</span>
            <span class="menu-text">
                <div class="menu-title">–ú–û–î–ï–†–ê–¶–ò–Ø</div>
                <div class="menu-subtitle">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º</div>
            </span>
            <span class="menu-arrow">‚Üí</span>
        `;

        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
        moderatorButton.style.cssText = `
            background: linear-gradient(145deg, rgba(255, 68, 68, 0.1), rgba(255, 68, 68, 0.2)) !important;
            border-color: rgba(255, 68, 68, 0.3) !important;
            box-shadow: 0 0 15px rgba(255, 68, 68, 0.1) !important;
        `;

        // –í—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        const statsBtn = document.getElementById('stats-btn');
        if (statsBtn) {
            statsBtn.parentNode.insertBefore(moderatorButton, statsBtn.nextSibling);
        } else {
            menuItems.appendChild(moderatorButton);
        }
    }

    createModeratorPanel() {
        const moderatorPanel = document.createElement('div');
        moderatorPanel.className = 'moderator-sidebar';
        moderatorPanel.id = 'moderator-sidebar';
        moderatorPanel.innerHTML = `
            <div class="sidebar-header">
                <h3>üõ°Ô∏è –ü–ê–ù–ï–õ–¨ –ú–û–î–ï–†–ê–¶–ò–ò</h3>
                <button class="close-sidebar" id="close-moderator-sidebar">√ó</button>
            </div>
            
            <div class="sidebar-content">
                <div class="moderation-stats">
                    <div class="stat-item">
                        <span class="stat-value" id="pending-submissions-count">0</span>
                        <span class="stat-label">–ó–∞—è–≤–æ–∫ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏</span>
                    </div>
                    <div class="stat-item">
                        <span class="stat-value" id="flagged-pixels-count">0</span>
                        <span class="stat-label">–ü–∏–∫—Å–µ–ª–µ–π —Å –∂–∞–ª–æ–±–∞–º–∏</span>
                    </div>
                    <div class="stat-item">
                        <span class="stat-value" id="total-pixels-count">0</span>
                        <span class="stat-label">–í—Å–µ–≥–æ –ø–∏–∫—Å–µ–ª–µ–π</span>
                    </div>
                </div>

                <div class="moderation-tabs">
                    <button class="moderation-tab active" data-tab="submissions">üìù –ó–ê–Ø–í–ö–ò</button>
                    <button class="moderation-tab" data-tab="pixels">üñºÔ∏è –ü–ò–ö–°–ï–õ–ò</button>
                    <button class="moderation-tab" data-tab="reports">‚ö†Ô∏è –ñ–ê–õ–û–ë–´</button>
                    <button class="moderation-tab" data-tab="history">üìä –ò–°–¢–û–†–ò–Ø</button>
                </div>

                <div class="moderation-content">
                    <!-- –í–∫–ª–∞–¥–∫–∞ –∑–∞—è–≤–æ–∫ -->
                    <div class="moderation-tab-content active" id="submissions-content">
                        <div class="submissions-list" id="submissions-list">
                            <!-- –ó–∞—è–≤–∫–∏ –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∑–¥–µ—Å—å -->
                        </div>
                    </div>

                    <!-- –í–∫–ª–∞–¥–∫–∞ –ø–∏–∫—Å–µ–ª–µ–π -->
                    <div class="moderation-tab-content" id="pixels-content">
                        <div class="pixels-filter">
                            <select id="pixels-filter-select">
                                <option value="all">–í—Å–µ –ø–∏–∫—Å–µ–ª–∏</option>
                                <option value="with-images">–° –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏</option>
                                <option value="with-links">–° —Å—Å—ã–ª–∫–∞–º–∏</option>
                                <option value="recent">–ù–µ–¥–∞–≤–Ω–∏–µ</option>
                            </select>
                        </div>
                        <div class="pixels-list" id="pixels-list">
                            <!-- –ü–∏–∫—Å–µ–ª–∏ –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∑–¥–µ—Å—å -->
                        </div>
                    </div>

                    <!-- –í–∫–ª–∞–¥–∫–∞ –∂–∞–ª–æ–± -->
                    <div class="moderation-tab-content" id="reports-content">
                        <div class="reports-list" id="reports-list">
                            <div class="empty-state">
                                <div style="font-size: 32px; margin-bottom: 12px;">‚ö†Ô∏è</div>
                                <div>–ñ–∞–ª–æ–± –ø–æ–∫–∞ –Ω–µ—Ç</div>
                            </div>
                        </div>
                    </div>

                    <!-- –í–∫–ª–∞–¥–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ -->
                    <div class="moderation-tab-content" id="history-content">
                        <div class="history-list" id="history-list">
                            <!-- –ò—Å—Ç–æ—Ä–∏—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∑–¥–µ—Å—å -->
                        </div>
                    </div>
                </div>
            </div>
        `;

        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏
        moderatorPanel.style.cssText = `
            position: fixed;
            top: 0;
            right: -100%;
            width: 95%;
            max-width: 450px;
            height: 100vh;
            background: linear-gradient(145deg, #1a1a1a, #2a2a2a);
            border-left: 1px solid rgba(255, 68, 68, 0.3);
            box-shadow: -5px 0 30px rgba(255, 68, 68, 0.2);
            z-index: 300;
            transition: right 0.4s ease;
            overflow-y: auto;
        `;

        document.body.appendChild(moderatorPanel);
    }

    setupEventListeners() {
        if (!this.isModerator) return;

        // –ö–Ω–æ–ø–∫–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –≤ –º–µ–Ω—é
        const moderatorBtn = document.getElementById('moderator-btn');
        if (moderatorBtn) {
            moderatorBtn.addEventListener('click', () => this.toggleModeratorPanel());
        }

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–∞–Ω–µ–ª–∏
        const closeModerator = document.getElementById('close-moderator-sidebar');
        if (closeModerator) {
            closeModerator.addEventListener('click', () => this.closeModeratorPanel());
        }

        // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
        document.addEventListener('click', (e) => {
            if (e.target.classList.contains('moderation-tab')) {
                this.switchModerationTab(e.target.dataset.tab);
            }
        });

        // –§–∏–ª—å—Ç—Ä –ø–∏–∫—Å–µ–ª–µ–π
        const pixelsFilter = document.getElementById('pixels-filter-select');
        if (pixelsFilter) {
            pixelsFilter.addEventListener('change', () => this.filterPixels());
        }

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –ø–∞–Ω–µ–ª–∏
        document.addEventListener('click', (e) => {
            const moderatorSidebar = document.getElementById('moderator-sidebar');
            const moderatorBtn = document.getElementById('moderator-btn');
            
            if (this.isModeratorPanelOpen && moderatorSidebar && 
                !moderatorSidebar.contains(e.target) && 
                !moderatorBtn?.contains(e.target)) {
                this.closeModeratorPanel();
            }
        });

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –Ω–∞ –ø–∏–∫—Å–µ–ª–∏ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
        this.setupPixelContextMenu();
    }

    setupPixelContextMenu() {
        document.addEventListener('contextmenu', (e) => {
            if (!this.isModerator) return;
            
            const pixel = e.target.closest('.pixel');
            if (pixel) {
                e.preventDefault();
                this.showPixelContextMenu(e, parseInt(pixel.dataset.id));
            }
        });
    }

    showPixelContextMenu(event, pixelId) {
        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –ø–∏–∫—Å–µ–ª—è
        const existingMenu = document.getElementById('pixel-context-menu');
        if (existingMenu) existingMenu.remove();

        const contextMenu = document.createElement('div');
        contextMenu.id = 'pixel-context-menu';
        contextMenu.style.cssText = `
            position: fixed;
            left: ${event.clientX}px;
            top: ${event.clientY}px;
            background: linear-gradient(145deg, #1a1a1a, #2a2a2a);
            border: 1px solid rgba(255, 68, 68, 0.3);
            border-radius: 8px;
            padding: 8px 0;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.5);
            z-index: 1000;
            min-width: 200px;
        `;

        const pixelData = window.miniGrid?.pixels.get(pixelId);
        const isOwned = !!pixelData;

        contextMenu.innerHTML = `
            <div class="context-menu-item" data-action="inspect">
                üîç –ò–Ω—Å–ø–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–∏–∫—Å–µ–ª—å
            </div>
            ${isOwned ? `
                <div class="context-menu-item" data-action="edit">
                    ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç
                </div>
                <div class="context-menu-item" data-action="flag">
                    ‚ö†Ô∏è –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –ø—Ä–æ–±–ª–µ–º–Ω—ã–π
                </div>
                <div class="context-menu-item" data-action="reset">
                    üóëÔ∏è –°–±—Ä–æ—Å–∏—Ç—å –ø–∏–∫—Å–µ–ª—å
                </div>
            ` : `
                <div class="context-menu-item disabled">
                    üì≠ –ü–∏–∫—Å–µ–ª—å —Å–≤–æ–±–æ–¥–µ–Ω
                </div>
            `}
        `;

        // –°—Ç–∏–ª–∏ –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–µ–Ω—é
        contextMenu.querySelectorAll('.context-menu-item').forEach(item => {
            item.style.cssText = `
                padding: 8px 16px;
                cursor: pointer;
                color: #fff;
                font-size: 12px;
                transition: background 0.2s ease;
            `;

            if (!item.classList.contains('disabled')) {
                item.addEventListener('mouseover', () => {
                    item.style.background = 'rgba(255, 68, 68, 0.2)';
                });
                item.addEventListener('mouseout', () => {
                    item.style.background = 'transparent';
                });
                item.addEventListener('click', () => {
                    this.handlePixelContextAction(item.dataset.action, pixelId);
                    contextMenu.remove();
                });
            } else {
                item.style.color = '#666';
                item.style.cursor = 'not-allowed';
            }
        });

        document.body.appendChild(contextMenu);

        // –£–¥–∞–ª—è–µ–º –º–µ–Ω—é –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ
        setTimeout(() => {
            document.addEventListener('click', () => {
                contextMenu.remove();
            }, { once: true });
        }, 100);
    }

    handlePixelContextAction(action, pixelId) {
        switch (action) {
            case 'inspect':
                this.inspectPixel(pixelId);
                break;
            case 'edit':
                this.editPixelContent(pixelId);
                break;
            case 'flag':
                this.flagPixel(pixelId);
                break;
            case 'reset':
                this.resetPixel(pixelId);
                break;
        }
    }

    inspectPixel(pixelId) {
        const pixelData = window.miniGrid?.pixels.get(pixelId);
        
        let info = `üîç –ò–Ω—Å–ø–µ–∫—Ü–∏—è –ø–∏–∫—Å–µ–ª—è #${pixelId}\n\n`;
        
        if (pixelData) {
            info += `üë§ –í–ª–∞–¥–µ–ª–µ—Ü: ${pixelData.owner}\n`;
            info += `üîó –ö–∞–Ω–∞–ª: ${pixelData.channel || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n`;
            info += `üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${pixelData.description || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n`;
            info += `üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: ${pixelData.categories?.join(', ') || '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}\n`;
            info += `üìÖ –î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏: ${MiniUtils.formatDate(pixelData.purchaseDate)}\n`;
            info += `üí∞ –¶–µ–Ω–∞: ${pixelData.price || 0.01} TON\n`;
            info += `üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${pixelData.imageUrl ? '–ï—Å—Ç—å' : '–ù–µ—Ç'}\n`;
        } else {
            info += `–ü–∏–∫—Å–µ–ª—å —Å–≤–æ–±–æ–¥–µ–Ω`;
        }

        if (window.Telegram?.WebApp) {
            window.Telegram.WebApp.showPopup({
                title: '–ò–Ω—Å–ø–µ–∫—Ü–∏—è –ø–∏–∫—Å–µ–ª—è',
                message: info,
                buttons: [{ type: 'ok' }]
            });
        } else {
            alert(info);
        }
    }

    editPixelContent(pixelId) {
        // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –º–æ–¥–∞–ª—å–Ω—ã–π –¥–∏–∞–ª–æ–≥ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º
        this.showModeratorEditModal(pixelId);
    }

    flagPixel(pixelId) {
        const reason = prompt('–ü—Ä–∏—á–∏–Ω–∞ –ø–æ–º–µ—Ç–∫–∏ –∫–∞–∫ –ø—Ä–æ–±–ª–µ–º–Ω—ã–π:');
        if (!reason) return;

        const flagRecord = {
            pixelId,
            reason,
            timestamp: new Date().toISOString(),
            moderator: this.moderatorUsername,
            status: 'flagged'
        };

        this.flaggedPixels.push(flagRecord);
        this.saveModerationData();
        
        MiniUtils.showNotification(`–ü–∏–∫—Å–µ–ª—å #${pixelId} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –ø—Ä–æ–±–ª–µ–º–Ω—ã–π`, 'success');
        this.updateModerationStats();
    }

    resetPixel(pixelId) {
        if (confirm(`–°–±—Ä–æ—Å–∏—Ç—å –ø–∏–∫—Å–µ–ª—å #${pixelId}? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.`)) {
            // –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∏–∫—Å–µ–ª—è
            if (window.miniGrid?.pixels.has(pixelId)) {
                window.miniGrid.pixels.delete(pixelId);
                window.miniGrid.savePixelData();
                window.miniGrid.updatePixelDisplay();
            }

            // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –º–æ–¥–µ—Ä–∞—Ü–∏–∏
            this.addModerationRecord('reset', pixelId, '–ü–∏–∫—Å–µ–ª—å —Å–±—Ä–æ—à–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º');
            
            MiniUtils.showNotification(`–ü–∏–∫—Å–µ–ª—å #${pixelId} —Å–±—Ä–æ—à–µ–Ω`, 'success');
        }
    }

    toggleModeratorPanel() {
        if (this.isModeratorPanelOpen) {
            this.closeModeratorPanel();
        } else {
            this.openModeratorPanel();
        }
    }

    openModeratorPanel() {
        const panel = document.getElementById('moderator-sidebar');
        if (panel) {
            panel.style.right = '0';
            this.isModeratorPanelOpen = true;
            
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            if (window.miniChannels) {
                window.miniChannels.closeMainSidebar();
            }
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            this.loadModerationData();
            this.updateModerationContent();
            this.updateModerationStats();
            
            MiniUtils.vibrate([100]);
        }
    }

    closeModeratorPanel() {
        const panel = document.getElementById('moderator-sidebar');
        if (panel) {
            panel.style.right = '-100%';
            this.isModeratorPanelOpen = false;
        }
    }

    switchModerationTab(tabName) {
        // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É
        document.querySelectorAll('.moderation-tab').forEach(tab => {
            tab.classList.remove('active');
        });
        document.querySelectorAll('.moderation-tab-content').forEach(content => {
            content.classList.remove('active');
        });

        const activeTab = document.querySelector(`[data-tab="${tabName}"]`);
        const activeContent = document.getElementById(`${tabName}-content`);
        
        if (activeTab) activeTab.classList.add('active');
        if (activeContent) activeContent.classList.add('active');

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –≤–∫–ª–∞–¥–∫–∏
        this.loadTabContent(tabName);
    }

    loadTabContent(tabName) {
        switch (tabName) {
            case 'submissions':
                this.loadSubmissions();
                break;
            case 'pixels':
                this.loadPixelsForModeration();
                break;
            case 'reports':
                this.loadReports();
                break;
            case 'history':
                this.loadModerationHistory();
                break;
        }
    }

    loadSubmissions() {
        const submissions = MiniUtils.loadFromStorage('nftg-channel-submissions', []);
        const submissionsList = document.getElementById('submissions-list');
        
        if (!submissionsList) return;

        const pendingSubmissions = submissions.filter(sub => sub.status === 'pending');

        if (pendingSubmissions.length === 0) {
            submissionsList.innerHTML = `
                <div class="empty-state">
                    <div style="font-size: 32px; margin-bottom: 12px;">üìù</div>
                    <div>–ù–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–µ—Ç</div>
                </div>
            `;
            return;
        }

        submissionsList.innerHTML = pendingSubmissions.map(submission => `
            <div class="submission-card" data-id="${submission.id}">
                <div class="submission-header">
                    <div class="submission-title">${submission.channelName}</div>
                    <div class="submission-date">${MiniUtils.formatDate(submission.submittedAt)}</div>
                </div>
                
                <div class="submission-info">
                    <div class="info-row">
                        <span class="info-label">üîó –ö–∞–Ω–∞–ª:</span>
                        <span class="info-value">${submission.telegramLink}</span>
                    </div>
                    <div class="info-row">
                        <span class="info-label">üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏:</span>
                        <span class="info-value">${submission.categories.join(', ')}</span>
                    </div>
                    <div class="info-row">
                        <span class="info-label">üë§ –ö–æ–Ω—Ç–∞–∫—Ç:</span>
                        <span class="info-value">${submission.ownerContact || '–ù–µ —É–∫–∞–∑–∞–Ω'}</span>
                    </div>
                </div>
                
                <div class="submission-description">
                    ${submission.description}
                </div>
                
                <div class="submission-actions">
                    <button class="btn-approve" onclick="window.miniModerator?.approveSubmission('${submission.id}')">
                        ‚úÖ –û–¥–æ–±—Ä–∏—Ç—å
                    </button>
                    <button class="btn-reject" onclick="window.miniModerator?.rejectSubmission('${submission.id}')">
                        ‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å
                    </button>
                    <button class="btn-edit" onclick="window.miniModerator?.editSubmission('${submission.id}')">
                        ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                    </button>
                </div>
            </div>
        `).join('');
    }

    approveSubmission(submissionId) {
        const submissions = MiniUtils.loadFromStorage('nftg-channel-submissions', []);
        const submissionIndex = submissions.findIndex(sub => sub.id === submissionId);
        
        if (submissionIndex === -1) return;

        submissions[submissionIndex].status = 'approved';
        submissions[submissionIndex].approvedAt = new Date().toISOString();
        submissions[submissionIndex].approvedBy = this.moderatorUsername;
        
        MiniUtils.saveToStorage('nftg-channel-submissions', submissions);
        
        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        this.addModerationRecord('approve', submissionId, `–ó–∞—è–≤–∫–∞ "${submissions[submissionIndex].channelName}" –æ–¥–æ–±—Ä–µ–Ω–∞`);
        
        MiniUtils.showNotification(`–ó–∞—è–≤–∫–∞ "${submissions[submissionIndex].channelName}" –æ–¥–æ–±—Ä–µ–Ω–∞`, 'success');
        
        this.loadSubmissions();
        this.updateModerationStats();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–Ω–∞–ª—ã
        if (window.miniChannels) {
            window.miniChannels.loadChannelsFromPixels();
        }
    }

    rejectSubmission(submissionId) {
        const reason = prompt('–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è (–±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤–ª–∞–¥–µ–ª—å—Ü—É):');
        if (!reason) return;

        const submissions = MiniUtils.loadFromStorage('nftg-channel-submissions', []);
        const submissionIndex = submissions.findIndex(sub => sub.id === submissionId);
        
        if (submissionIndex === -1) return;

        submissions[submissionIndex].status = 'rejected';
        submissions[submissionIndex].rejectedAt = new Date().toISOString();
        submissions[submissionIndex].rejectedBy = this.moderatorUsername;
        submissions[submissionIndex].rejectionReason = reason;
        
        MiniUtils.saveToStorage('nftg-channel-submissions', submissions);
        
        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        this.addModerationRecord('reject', submissionId, `–ó–∞—è–≤–∫–∞ "${submissions[submissionIndex].channelName}" –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞: ${reason}`);
        
        MiniUtils.showNotification(`–ó–∞—è–≤–∫–∞ "${submissions[submissionIndex].channelName}" –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞`, 'success');
        
        this.loadSubmissions();
        this.updateModerationStats();
    }

    editSubmission(submissionId) {
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
        MiniUtils.showNotification('–§—É–Ω–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞—è–≤–æ–∫ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ', 'info');
    }

    loadPixelsForModeration() {
        if (!window.miniGrid) return;

        const pixelsList = document.getElementById('pixels-list');
        if (!pixelsList) return;

        const allPixels = Array.from(window.miniGrid.pixels.entries());
        const filter = document.getElementById('pixels-filter-select')?.value || 'all';
        
        let filteredPixels = allPixels;

        switch (filter) {
            case 'with-images':
                filteredPixels = allPixels.filter(([id, data]) => data.imageUrl);
                break;
            case 'with-links':
                filteredPixels = allPixels.filter(([id, data]) => data.telegramLink);
                break;
            case 'recent':
                const yesterday = new Date(Date.now() - 24 * 60 * 60 * 1000);
                filteredPixels = allPixels.filter(([id, data]) => 
                    new Date(data.purchaseDate) > yesterday
                );
                break;
        }

        if (filteredPixels.length === 0) {
            pixelsList.innerHTML = `
                <div class="empty-state">
                    <div style="font-size: 32px; margin-bottom: 12px;">üñºÔ∏è</div>
                    <div>–ü–∏–∫—Å–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</div>
                </div>
            `;
            return;
        }

        pixelsList.innerHTML = filteredPixels.map(([pixelId, pixelData]) => `
            <div class="pixel-mod-card" data-pixel-id="${pixelId}">
                <div class="pixel-mod-header">
                    <span class="pixel-id">#${pixelId}</span>
                    <span class="pixel-owner">${pixelData.owner}</span>
                    <span class="pixel-date">${MiniUtils.formatDate(pixelData.purchaseDate)}</span>
                </div>
                
                ${pixelData.imageUrl ? `
                    <div class="pixel-image-preview">
                        <img src="${pixelData.imageUrl}" alt="Pixel #${pixelId}" style="width: 60px; height: 60px; object-fit: cover; border-radius: 4px;">
                    </div>
                ` : ''}
                
                <div class="pixel-mod-info">
                    <div class="info-row">
                        <span class="info-label">üîó –ö–∞–Ω–∞–ª:</span>
                        <span class="info-value">${pixelData.channel || '–ù–µ —É–∫–∞–∑–∞–Ω'}</span>
                    </div>
                    <div class="info-row">
                        <span class="info-label">üìù –û–ø–∏—Å–∞–Ω–∏–µ:</span>
                        <span class="info-value">${pixelData.description || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</span>
                    </div>
                </div>
                
                <div class="pixel-mod-actions">
                    <button class="btn-mod-edit" onclick="window.miniModerator?.editPixelContent(${pixelId})">
                        ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                    </button>
                    <button class="btn-mod-flag" onclick="window.miniModerator?.flagPixel(${pixelId})">
                        ‚ö†Ô∏è –ü–æ–º–µ—Ç–∏—Ç—å
                    </button>
                    <button class="btn-mod-reset" onclick="window.miniModerator?.resetPixel(${pixelId})">
                        üóëÔ∏è –°–±—Ä–æ—Å–∏—Ç—å
                    </button>
                </div>
            </div>
        `).join('');
    }

    filterPixels() {
        this.loadPixelsForModeration();
    }

    loadReports() {
        const reportsList = document.getElementById('reports-list');
        if (!reportsList) return;

        // –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è –∂–∞–ª–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        reportsList.innerHTML = `
            <div class="empty-state">
                <div style="font-size: 32px; margin-bottom: 12px;">‚ö†Ô∏è</div>
                <div>–°–∏—Å—Ç–µ–º–∞ –∂–∞–ª–æ–± –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</div>
                <div style="font-size: 12px; color: #666; margin-top: 8px;">
                    –°–∫–æ—Ä–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–º–æ–≥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∂–∞–ª–æ–±—ã –Ω–∞ –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
                </div>
            </div>
        `;
    }

    loadModerationHistory() {
        const historyList = document.getElementById('history-list');
        if (!historyList) return;

        if (this.moderationHistory.length === 0) {
            historyList.innerHTML = `
                <div class="empty-state">
                    <div style="font-size: 32px; margin-bottom: 12px;">üìä</div>
                    <div>–ò—Å—Ç–æ—Ä–∏—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –ø—É—Å—Ç–∞</div>
                </div>
            `;
            return;
        }

        historyList.innerHTML = this.moderationHistory
            .sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp))
            .map(record => `
                <div class="history-record">
                    <div class="history-header">
                        <span class="history-action">${this.getActionIcon(record.action)} ${this.getActionText(record.action)}</span>
                        <span class="history-date">${MiniUtils.formatDate(record.timestamp)}</span>
                    </div>
                    <div class="history-description">${record.description}</div>
                    <div class="history-moderator">–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: ${record.moderator}</div>
                </div>
            `).join('');
    }

    getActionIcon(action) {
        const icons = {
            'approve': '‚úÖ',
            'reject': '‚ùå',
            'edit': '‚úèÔ∏è',
            'flag': '‚ö†Ô∏è',
            'reset': 'üóëÔ∏è',
            'unflag': 'üîì'
        };
        return icons[action] || 'üìù';
    }

    getActionText(action) {
        const texts = {
            'approve': '–û–¥–æ–±—Ä–µ–Ω–∏–µ',
            'reject': '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ',
            'edit': '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ',
            'flag': '–ü–æ–º–µ—Ç–∫–∞',
            'reset': '–°–±—Ä–æ—Å',
            'unflag': '–°–Ω—è—Ç–∏–µ –ø–æ–º–µ—Ç–∫–∏'
        };
        return texts[action] || '–î–µ–π—Å—Ç–≤–∏–µ';
    }

    addModerationRecord(action, targetId, description) {
        const record = {
            id: MiniUtils.generateId(),
            action,
            targetId,
            description,
            moderator: this.moderatorUsername,
            timestamp: new Date().toISOString()
        };

        this.moderationHistory.push(record);
        this.saveModerationData();
    }

    updateModerationStats() {
        const submissions = MiniUtils.loadFromStorage('nftg-channel-submissions', []);
        const pendingCount = submissions.filter(sub => sub.status === 'pending').length;
        const totalPixels = window.miniGrid ? window.miniGrid.pixels.size : 0;

        document.getElementById('pending-submissions-count').textContent = pendingCount;
        document.getElementById('flagged-pixels-count').textContent = this.flaggedPixels.length;
        document.getElementById('total-pixels-count').textContent = totalPixels;
    }

    updateModerationContent() {
        const activeTab = document.querySelector('.moderation-tab.active')?.dataset.tab;
        if (activeTab) {
            this.loadTabContent(activeTab);
        }
    }

    showModeratorEditModal(pixelId) {
        const modal = document.createElement('div');
        modal.className = 'modal moderator-modal';
        modal.id = 'moderator-edit-modal';
        
        const pixelData = window.miniGrid?.pixels.get(pixelId) || {};
        
        modal.innerHTML = `
            <div class="modal-content">
                <h3>üõ°Ô∏è –ú–û–î–ï–†–ê–¶–ò–Ø –ü–ò–ö–°–ï–õ–Ø #${pixelId}</h3>
                
                <div class="form-group">
                    <label>üë§ –í–ª–∞–¥–µ–ª–µ—Ü:</label>
                    <input type="text" id="mod-owner" class="form-control" value="${pixelData.owner || ''}" readonly>
                </div>
                
                <div class="form-group">
                    <label>üîó Telegram –∫–∞–Ω–∞–ª:</label>
                    <input type="text" id="mod-telegram-link" class="form-control" value="${pixelData.telegramLink || ''}">
                </div>
                
                <div class="form-group">
                    <label>üìù –û–ø–∏—Å–∞–Ω–∏–µ:</label>
                    <textarea id="mod-description" class="form-control" rows="3" maxlength="200">${pixelData.description || ''}</textarea>
                    <div class="char-counter">
                        <span id="mod-description-chars">${(pixelData.description || '').length}</span>/200
                    </div>
                </div>
                
                <div class="form-group">
                    <label>üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏:</label>
                    <div class="category-selector" id="mod-categories">
                        <div class="category-tag ${pixelData.categories?.includes('–ö—Ä–∏–ø—Ç–∞') ? 'selected' : ''}" data-category="–ö—Ä–∏–ø—Ç–∞">üí∞ –ö–†–ò–ü–¢–ê</div>
                        <div class="category-tag ${pixelData.categories?.includes('–ò–≥—Ä—ã') ? 'selected' : ''}" data-category="–ò–≥—Ä—ã">üéÆ –ò–ì–†–´</div>
                        <div class="category-tag ${pixelData.categories?.includes('–ù–æ–≤–æ—Å—Ç–∏') ? 'selected' : ''}" data-category="–ù–æ–≤–æ—Å—Ç–∏">üì∞ –ù–û–í–û–°–¢–ò</div>
                        <div class="category-tag ${pixelData.categories?.includes('–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏') ? 'selected' : ''}" data-category="–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏">üíª –¢–ï–•–ù–û–õ–û–ì–ò–ò</div>
                        <div class="category-tag ${pixelData.categories?.includes('–ë–∏–∑–Ω–µ—Å') ? 'selected' : ''}" data-category="–ë–∏–∑–Ω–µ—Å">üíº –ë–ò–ó–ù–ï–°</div>
                        <div class="category-tag ${pixelData.categories?.includes('–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ') ? 'selected' : ''}" data-category="–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ">üìö –û–ë–†–ê–ó–û–í–ê–ù–ò–ï</div>
                        <div class="category-tag ${pixelData.categories?.includes('–°–ø–æ—Ä—Ç') ? 'selected' : ''}" data-category="–°–ø–æ—Ä—Ç">‚öΩ –°–ü–û–†–¢</div>
                        <div class="category-tag ${pixelData.categories?.includes('–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è') ? 'selected' : ''}" data-category="–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è">üé¨ –†–ê–ó–í–õ–ï–ß–ï–ù–ò–Ø</div>
                    </div>
                </div>
                
                ${pixelData.imageUrl ? `
                    <div class="form-group">
                        <label>üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:</label>
                        <div class="image-preview">
                            <img src="${pixelData.imageUrl}" style="max-width: 150px; max-height: 150px; border-radius: 4px;">
                            <button type="button" class="btn-remove-image" onclick="window.miniModerator?.removePixelImage(${pixelId})">
                                üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                            </button>
                        </div>
                    </div>
                ` : ''}
                
                <div class="moderation-actions">
                    <div class="action-group">
                        <label>üõ°Ô∏è –î–µ–π—Å—Ç–≤–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞:</label>
                        <div class="mod-action-buttons">
                            <button class="btn btn-warning" onclick="window.miniModerator?.flagPixelFromModal(${pixelId})">
                                ‚ö†Ô∏è –ü–æ–º–µ—Ç–∏—Ç—å –∫–∞–∫ –ø—Ä–æ–±–ª–µ–º–Ω—ã–π
                            </button>
                            <button class="btn btn-danger" onclick="window.miniModerator?.resetPixelFromModal(${pixelId})">
                                üóëÔ∏è –°–±—Ä–æ—Å–∏—Ç—å –ø–∏–∫—Å–µ–ª—å
                            </button>
                        </div>
                    </div>
                </div>
                
                <div class="modal-actions">
                    <button class="btn btn-success" onclick="window.miniModerator?.saveModeratorChanges(${pixelId})">
                        üíæ –°–û–•–†–ê–ù–ò–¢–¨ –ò–ó–ú–ï–ù–ï–ù–ò–Ø
                    </button>
                    <button class="btn btn-secondary" onclick="window.miniModerator?.closeModeratorEditModal()">
                        ‚ùå –û–¢–ú–ï–ù–ê
                    </button>
                </div>
            </div>
        `;

        document.body.appendChild(modal);
        modal.classList.add('active');

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        this.setupModeratorModalEvents(pixelId);
    }

    setupModeratorModalEvents(pixelId) {
        // –°—á–µ—Ç—á–∏–∫ —Å–∏–º–≤–æ–ª–æ–≤
        const descriptionTextarea = document.getElementById('mod-description');
        const charCounter = document.getElementById('mod-description-chars');
        if (descriptionTextarea && charCounter) {
            descriptionTextarea.addEventListener('input', (e) => {
                charCounter.textContent = e.target.value.length;
            });
        }

        // –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        const categorySelector = document.getElementById('mod-categories');
        if (categorySelector) {
            categorySelector.addEventListener('click', (e) => {
                if (e.target.classList.contains('category-tag')) {
                    e.target.classList.toggle('selected');
                }
            });
        }
    }

    removePixelImage(pixelId) {
        if (confirm('–£–¥–∞–ª–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–∏–∫—Å–µ–ª—è?')) {
            const pixelData = window.miniGrid?.pixels.get(pixelId);
            if (pixelData) {
                delete pixelData.imageUrl;
                window.miniGrid.pixels.set(pixelId, pixelData);
                window.miniGrid.savePixelData();
                window.miniGrid.updatePixelDisplay();
                
                this.addModerationRecord('edit', pixelId, `–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ —Å –ø–∏–∫—Å–µ–ª—è #${pixelId}`);
                
                MiniUtils.showNotification(`–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ —Å –ø–∏–∫—Å–µ–ª—è #${pixelId}`, 'success');
                this.closeModeratorEditModal();
            }
        }
    }

    flagPixelFromModal(pixelId) {
        this.closeModeratorEditModal();
        this.flagPixel(pixelId);
    }

    resetPixelFromModal(pixelId) {
        this.closeModeratorEditModal();
        this.resetPixel(pixelId);
    }

    saveModeratorChanges(pixelId) {
        const telegramLink = document.getElementById('mod-telegram-link')?.value.trim();
        const description = document.getElementById('mod-description')?.value.trim();
        
        // –°–æ–±–∏—Ä–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        const selectedCategories = Array.from(document.querySelectorAll('#mod-categories .category-tag.selected'))
            .map(tag => tag.dataset.category);

        // –í–∞–ª–∏–¥–∞—Ü–∏—è
        if (telegramLink && !MiniUtils.validateTelegramUsername(telegramLink)) {
            MiniUtils.showNotification('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ Telegram –∫–∞–Ω–∞–ª', 'error');
            return;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∏–∫—Å–µ–ª—è
        const pixelData = window.miniGrid?.pixels.get(pixelId);
        if (pixelData) {
            const changes = [];
            
            if (telegramLink !== pixelData.telegramLink) {
                pixelData.telegramLink = telegramLink;
                pixelData.channel = MiniUtils.extractTelegramUsername(telegramLink);
                changes.push('—Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª');
            }
            
            if (description !== pixelData.description) {
                pixelData.description = description;
                changes.push('–æ–ø–∏—Å–∞–Ω–∏–µ');
            }
            
            if (JSON.stringify(selectedCategories) !== JSON.stringify(pixelData.categories)) {
                pixelData.categories = selectedCategories;
                changes.push('–∫–∞—Ç–µ–≥–æ—Ä–∏–∏');
            }

            if (changes.length > 0) {
                window.miniGrid.pixels.set(pixelId, pixelData);
                window.miniGrid.savePixelData();
                window.miniGrid.updatePixelDisplay();
                
                this.addModerationRecord('edit', pixelId, `–ò–∑–º–µ–Ω–µ–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º: ${changes.join(', ')}`);
                
                MiniUtils.showNotification(`–ü–∏–∫—Å–µ–ª—å #${pixelId} –æ–±–Ω–æ–≤–ª–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º`, 'success');
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–Ω–∞–ª—ã
                if (window.miniChannels) {
                    window.miniChannels.onPixelPurchased();
                }
            }
        }

        this.closeModeratorEditModal();
    }

    closeModeratorEditModal() {
        const modal = document.getElementById('moderator-edit-modal');
        if (modal) {
            modal.remove();
        }
    }

    loadModerationData() {
        this.moderationHistory = MiniUtils.loadFromStorage('nftg-moderation-history', []);
        this.flaggedPixels = MiniUtils.loadFromStorage('nftg-flagged-pixels', []);
    }

    saveModerationData() {
        MiniUtils.saveToStorage('nftg-moderation-history', this.moderationHistory);
        MiniUtils.saveToStorage('nftg-flagged-pixels', this.flaggedPixels);
    }

    // –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –¥—Ä—É–≥–∏–º–∏ –º–æ–¥—É–ª—è–º–∏
    isModerator() {
        return this.isModerator;
    }

    getModeratorUsername() {
        return this.moderatorUsername;
    }

    getPendingSubmissionsCount() {
        const submissions = MiniUtils.loadFromStorage('nftg-channel-submissions', []);
        return submissions.filter(sub => sub.status === 'pending').length;
    }

    getFlaggedPixelsCount() {
        return this.flaggedPixels.length;
    }

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏
    getModerationStats() {
        const submissions = MiniUtils.loadFromStorage('nftg-channel-submissions', []);
        
        return {
            pendingSubmissions: submissions.filter(sub => sub.status === 'pending').length,
            approvedSubmissions: submissions.filter(sub => sub.status === 'approved').length,
            rejectedSubmissions: submissions.filter(sub => sub.status === 'rejected').length,
            flaggedPixels: this.flaggedPixels.length,
            moderationActions: this.moderationHistory.length,
            totalPixels: window.miniGrid ? window.miniGrid.pixels.size : 0
        };
    }

    exportModerationReport() {
        const stats = this.getModerationStats();
        const submissions = MiniUtils.loadFromStorage('nftg-channel-submissions', []);
        
        const report = {
            generatedAt: new Date().toISOString(),
            moderator: this.moderatorUsername,
            statistics: stats,
            submissions: submissions,
            flaggedPixels: this.flaggedPixels,
            moderationHistory: this.moderationHistory,
            version: '1.0'
        };

        const blob = new Blob([JSON.stringify(report, null, 2)], { type: 'application/json' });
        const url = URL.createObjectURL(blob);
        
        const a = document.createElement('a');
        a.href = url;
        a.download = `nftg-moderation-report-${new Date().toISOString().split('T')[0]}.json`;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        
        URL.revokeObjectURL(url);
        MiniUtils.showNotification('–û—Ç—á–µ—Ç –ø–æ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω', 'success');
    }

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –º–æ–¥–µ—Ä–∞—Ü–∏–∏ (–≤ –±—É–¥—É—â–µ–º)
    autoModerateProfanity(text) {
        // –°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤ (–±–∞–∑–æ–≤—ã–π)
        const profanityList = ['—Å–ø–∞–º', '–º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ', '–æ–±–º–∞–Ω'];
        
        for (const word of profanityList) {
            if (text.toLowerCase().includes(word.toLowerCase())) {
                return {
                    hasProfanity: true,
                    detectedWords: [word]
                };
            }
        }
        
        return { hasProfanity: false, detectedWords: [] };
    }

    autoModerateLinks(link) {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –¥–æ–º–µ–Ω—ã
        const suspiciousDomains = ['bit.ly', 'tinyurl.com'];
        
        try {
            const url = new URL(link);
            if (suspiciousDomains.includes(url.hostname)) {
                return {
                    isSuspicious: true,
                    reason: '–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π –¥–æ–º–µ–Ω'
                };
            }
        } catch (e) {
            return {
                isSuspicious: true,
                reason: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞'
            };
        }
        
        return { isSuspicious: false };
    }

    // –î–µ–±–∞–≥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    getDebugInfo() {
        return {
            isModerator: this.isModerator,
            moderatorUsername: this.moderatorUsername,
            isModeratorPanelOpen: this.isModeratorPanelOpen,
            pendingSubmissions: this.getPendingSubmissionsCount(),
            flaggedPixels: this.getFlaggedPixelsCount(),
            moderationHistory: this.moderationHistory.length,
            stats: this.getModerationStats()
        };
    }
}

// CSS —Å—Ç–∏–ª–∏ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏
const moderatorStyles = `
<style>
.moderator-sidebar .sidebar-content {
    padding: 16px;
}

.moderation-stats {
    display: grid;
    grid-template-columns: 1fr;
    gap: 12px;
    margin-bottom: 20px;
    padding: 16px;
    background: linear-gradient(145deg, rgba(255, 68, 68, 0.1), rgba(255, 68, 68, 0.05));
    border: 1px solid rgba(255, 68, 68, 0.2);
    border-radius: 8px;
}

.moderation-stats .stat-item {
    text-align: center;
}

.moderation-stats .stat-value {
    display: block;
    font-size: 24px;
    font-weight: bold;
    color: #ff4444;
    margin-bottom: 4px;
}

.moderation-stats .stat-label {
    font-size: 11px;
    color: #ccc;
}

.moderation-tabs {
    display: flex;
    gap: 4px;
    margin-bottom: 16px;
    border-bottom: 1px solid rgba(255, 68, 68, 0.2);
}

.moderation-tab {
    flex: 1;
    padding: 8px 4px;
    background: transparent;
    border: none;
    color: #ccc;
    font-size: 10px;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
    border-bottom: 2px solid transparent;
}

.moderation-tab.active {
    color: #ff4444;
    border-bottom-color: #ff4444;
}

.moderation-tab:hover {
    color: #fff;
}

.moderation-tab-content {
    display: none;
}

.moderation-tab-content.active {
    display: block;
}

.submission-card, .pixel-mod-card {
    background: linear-gradient(145deg, #1a1a1a, #2a2a2a);
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: 8px;
    padding: 12px;
    margin-bottom: 12px;
}

.submission-header, .pixel-mod-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 8px;
}

.submission-title {
    font-weight: 600;
    color: #fff;
    font-size: 14px;
}

.submission-date, .pixel-date {
    font-size: 10px;
    color: #999;
}

.submission-info, .pixel-mod-info {
    margin: 8px 0;
}

.info-row {
    display: flex;
    margin-bottom: 4px;
    font-size: 11px;
}

.info-label {
    min-width: 80px;
    color: #ccc;
    font-weight: 600;
}

.info-value {
    color: #fff;
    flex: 1;
    word-break: break-word;
}

.submission-description {
    background: rgba(0, 0, 0, 0.3);
    padding: 8px;
    border-radius: 4px;
    margin: 8px 0;
    font-size: 11px;
    line-height: 1.4;
    color: #ddd;
}

.submission-actions, .pixel-mod-actions {
    display: flex;
    gap: 6px;
    margin-top: 12px;
}

.btn-approve, .btn-reject, .btn-edit, .btn-mod-edit, .btn-mod-flag, .btn-mod-reset {
    padding: 6px 10px;
    border: none;
    border-radius: 4px;
    font-size: 10px;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
    flex: 1;
}

.btn-approve {
    background: linear-gradient(145deg, #00ff88, #00cc66);
    color: #000;
}

.btn-reject, .btn-mod-reset {
    background: linear-gradient(145deg, #ff4444, #cc0000);
    color: #fff;
}

.btn-edit, .btn-mod-edit {
    background: linear-gradient(145deg, #00D4FF, #0099CC);
    color: #000;
}

.btn-mod-flag {
    background: linear-gradient(145deg, #FFB800, #FF9500);
    color: #000;
}

.pixel-id {
    font-family: monospace;
    font-weight: bold;
    color: #00D4FF;
}

.pixel-owner {
    color: #00ff88;
    font-size: 11px;
}

.pixel-image-preview {
    margin: 8px 0;
    text-align: center;
}

.pixels-filter {
    margin-bottom: 16px;
}

.pixels-filter select {
    width: 100%;
    padding: 8px;
    background: linear-gradient(145deg, #1a1a1a, #2a2a2a);
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: 4px;
    color: #fff;
    font-size: 12px;
}

.history-record {
    background: linear-gradient(145deg, #1a1a1a, #2a2a2a);
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: 8px;
    padding: 12px;
    margin-bottom: 8px;
}

.history-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 6px;
}

.history-action {
    font-weight: 600;
    color: #fff;
    font-size: 12px;
}

.history-date {
    font-size: 10px;
    color: #999;
}

.history-description {
    font-size: 11px;
    color: #ddd;
    margin-bottom: 4px;
    line-height: 1.3;
}

.history-moderator {
    font-size: 10px;
    color: #ff4444;
    font-weight: 600;
}

.empty-state {
    text-align: center;
    padding: 40px 20px;
    color: rgba(255,255,255,0.6);
}

.moderator-modal .modal-content {
    max-width: 500px;
    max-height: 90vh;
}

.image-preview {
    text-align: center;
    margin: 8px 0;
}

.btn-remove-image {
    display: block;
    margin: 8px auto 0;
    padding: 4px 8px;
    background: linear-gradient(145deg, #ff4444, #cc0000);
    color: #fff;
    border: none;
    border-radius: 4px;
    font-size: 10px;
    cursor: pointer;
}

.moderation-actions {
    background: rgba(255, 68, 68, 0.1);
    border: 1px solid rgba(255, 68, 68, 0.2);
    border-radius: 8px;
    padding: 12px;
    margin: 16px 0;
}

.action-group label {
    display: block;
    font-weight: 600;
    margin-bottom: 8px;
    color: #ff4444;
}

.mod-action-buttons {
    display: flex;
    gap: 8px;
}

.mod-action-buttons .btn {
    flex: 1;
    font-size: 11px;
    padding: 8px 12px;
}
</style>
`;

// –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –≤ –¥–æ–∫—É–º–µ–Ω—Ç
document.head.insertAdjacentHTML('beforeend', moderatorStyles);

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
window.MiniModerator = MiniModerator;